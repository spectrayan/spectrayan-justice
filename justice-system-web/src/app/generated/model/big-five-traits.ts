/**
 * Justice system APIs
 *
 * Contact: admin@spectrayan.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import {FormArray, FormControl, FormGroup, Validators} from "@angular/forms";
import {DocumentData, QueryDocumentSnapshot, SnapshotOptions, Timestamp} from "@angular/fire/firestore";

export interface BigFiveTraits { 
        /**
        * Score for openness to experience (1-100). Higher scores indicate greater openness to new experiences, creativity, and intellectual curiosity.
        */
        openness: number;
    
        /**
        * Score for conscientiousness (1-100). Higher scores indicate greater organization, responsibility, and self-discipline.
        */
        conscientiousness: number;
    
        /**
        * Score for extraversion (1-100). Higher scores indicate greater sociability, assertiveness, and energy.
        */
        extraversion: number;
    
        /**
        * Score for agreeableness (1-100). Higher scores indicate greater compassion, cooperation, and consideration for others.
        */
        agreeableness: number;
    
        /**
        * Score for neuroticism (1-100). Higher scores indicate greater emotional instability and tendency toward negative emotions.
        */
        neuroticism: number;
    
        /**
        * The date when the Big Five traits assessment was conducted.
        */
        assessmentDate?: Date;
    
        /**
        * The method or tool used to assess the Big Five traits.
        */
        assessmentMethod?: string;
    
}

export type BigFiveTraitsFormType = FormGroup<{ 
    openness: FormControl<number>;

    conscientiousness: FormControl<number>;

    extraversion: FormControl<number>;

    agreeableness: FormControl<number>;

    neuroticism: FormControl<number>;

    assessmentDate: FormControl<Date|null>;

    assessmentMethod: FormControl<string|null>;
 }>

export function getBigFiveTraitsForm(): BigFiveTraitsFormType {
    return new FormGroup({ 
    openness: new FormControl<number>(0, {  nonNullable:  true  ,
    validators: [  Validators.required,  Validators.min(1), Validators.max(100),] } ),
    

    conscientiousness: new FormControl<number>(0, {  nonNullable:  true  ,
    validators: [  Validators.required,  Validators.min(1), Validators.max(100),] } ),
    

    extraversion: new FormControl<number>(0, {  nonNullable:  true  ,
    validators: [  Validators.required,  Validators.min(1), Validators.max(100),] } ),
    

    agreeableness: new FormControl<number>(0, {  nonNullable:  true  ,
    validators: [  Validators.required,  Validators.min(1), Validators.max(100),] } ),
    

    neuroticism: new FormControl<number>(0, {  nonNullable:  true  ,
    validators: [  Validators.required,  Validators.min(1), Validators.max(100),] } ),
    

    assessmentDate: new FormControl<Date>(new Date(), {  nonNullable:   false ,
    validators: [ ] } ),
    

    assessmentMethod: new FormControl<string>("", {  nonNullable:   false ,
    validators: [ ] } ),
    
    })
}


// Firestore data converter for BigFiveTraits
export const BigFiveTraitsFirestoreConverter = {
toFirestore(modelObject: BigFiveTraits): DocumentData {
const result: DocumentData = {};
        if (modelObject.openness !== undefined) {
                    result['openness'] = modelObject.openness;
        }
        if (modelObject.conscientiousness !== undefined) {
                    result['conscientiousness'] = modelObject.conscientiousness;
        }
        if (modelObject.extraversion !== undefined) {
                    result['extraversion'] = modelObject.extraversion;
        }
        if (modelObject.agreeableness !== undefined) {
                    result['agreeableness'] = modelObject.agreeableness;
        }
        if (modelObject.neuroticism !== undefined) {
                    result['neuroticism'] = modelObject.neuroticism;
        }
        if (modelObject.assessmentDate !== undefined) {
                    result['assessmentDate'] = modelObject.assessmentDate;
        }
        if (modelObject.assessmentMethod !== undefined) {
                    result['assessmentMethod'] = modelObject.assessmentMethod;
        }
return result;
},
fromFirestore(snapshot: QueryDocumentSnapshot, options: SnapshotOptions): BigFiveTraits {
const data = snapshot.data(options);
return {
    
                    openness: data['openness'],
    
                    conscientiousness: data['conscientiousness'],
    
                    extraversion: data['extraversion'],
    
                    agreeableness: data['agreeableness'],
    
                    neuroticism: data['neuroticism'],
    
                assessmentDate: data['assessmentDate'] ? (data['assessmentDate'] as Timestamp).toDate() : undefined,
    
                    assessmentMethod: data['assessmentMethod'],
    } as BigFiveTraits;
    }

};

