/**
 * Justice system APIs
 *
 * Contact: admin@spectrayan.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


/**
 * An object to provide explicit details on a problem towards an API consumer.
 */
import {FormArray, FormControl, FormGroup, Validators} from "@angular/forms";
import {DocumentData, QueryDocumentSnapshot, SnapshotOptions, Timestamp} from "@angular/fire/firestore";

export interface ProblemDetailErrorsInner { 
        /**
        * A granular description on the specific error related to a body property, query parameter, path parameters, and/or header.
        */
        detail: string;
    
        /**
        * A JSON Pointer to a specific request body property that is the source of error.
        */
        pointer?: string;
    
        /**
        * The name of the query or path parameter that is the source of error.
        */
        parameter?: string;
    
        /**
        * The name of the header that is the source of error.
        */
        header?: string;
    
        /**
        * A string containing additional provider specific codes to identify the error context.
        */
        code?: string;
    
}



// Firestore data converter for ProblemDetailErrorsInner
export const ProblemDetailErrorsInnerFirestoreConverter = {
toFirestore(modelObject: ProblemDetailErrorsInner): DocumentData {
const result: DocumentData = {};
        if (modelObject.detail !== undefined) {
                    result['detail'] = modelObject.detail;
        }
        if (modelObject.pointer !== undefined) {
                    result['pointer'] = modelObject.pointer;
        }
        if (modelObject.parameter !== undefined) {
                    result['parameter'] = modelObject.parameter;
        }
        if (modelObject.header !== undefined) {
                    result['header'] = modelObject.header;
        }
        if (modelObject.code !== undefined) {
                    result['code'] = modelObject.code;
        }
return result;
},
fromFirestore(snapshot: QueryDocumentSnapshot, options: SnapshotOptions): ProblemDetailErrorsInner {
const data = snapshot.data(options);
return {
    
                    detail: data['detail'],
    
                    pointer: data['pointer'],
    
                    parameter: data['parameter'],
    
                    header: data['header'],
    
                    code: data['code'],
    } as ProblemDetailErrorsInner;
    }

};

