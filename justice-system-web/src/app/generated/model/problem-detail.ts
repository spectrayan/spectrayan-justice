/**
 * Justice system APIs
 *
 * Contact: admin@spectrayan.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { ProblemDetailErrorsInner } from './problem-detail-errors-inner';


import * as ProblemDetailErrorsInnerModule from './problem-detail-errors-inner';
import {FormArray, FormControl, FormGroup, Validators} from "@angular/forms";
import {DocumentData, QueryDocumentSnapshot, SnapshotOptions, Timestamp} from "@angular/fire/firestore";

export interface ProblemDetail { 
        /**
        * A URI reference that identifies the problem type.
        */
        type?: string;
    
        /**
        * The HTTP status code generated by the origin server for this occurrence of the problem.
        */
        status?: number;
    
        /**
        * A short, human-readable summary of the problem type. It should not change from occurrence to occurrence of the problem, except for purposes of localization.
        */
        title?: string;
    
        /**
        * A human-readable explanation specific to this occurrence of the problem.
        */
        detail: string;
    
        /**
        * A URI reference that identifies the specific occurrence of the problem. It may or may not yield further information if dereferenced.
        */
        instance?: string;
    
        /**
        * An API specific error code aiding the provider team understand the error based on their own potential taxonomy or registry.
        */
        code?: string;
    
        /**
        * An array of error details to accompany a problem details response.
        */
        errors?: Array<ProblemDetailErrorsInner>;
    
}



// Firestore data converter for ProblemDetail
export const ProblemDetailFirestoreConverter = {
toFirestore(modelObject: ProblemDetail): DocumentData {
const result: DocumentData = {};
        if (modelObject.type !== undefined) {
                    result['type'] = modelObject.type;
        }
        if (modelObject.status !== undefined) {
                    result['status'] = modelObject.status;
        }
        if (modelObject.title !== undefined) {
                    result['title'] = modelObject.title;
        }
        if (modelObject.detail !== undefined) {
                    result['detail'] = modelObject.detail;
        }
        if (modelObject.instance !== undefined) {
                    result['instance'] = modelObject.instance;
        }
        if (modelObject.code !== undefined) {
                    result['code'] = modelObject.code;
        }
        if (modelObject.errors !== undefined) {
        
            
            if (Array.isArray(modelObject.errors)) {
            result['errors'] = modelObject.errors.map(item => {
            return ProblemDetailErrorsInnerModule.ProblemDetailErrorsInnerFirestoreConverter.toFirestore(item);
            });
            } else {
            result['errors'] = [];
            } 
        
        }
return result;
},
fromFirestore(snapshot: QueryDocumentSnapshot, options: SnapshotOptions): ProblemDetail {
const data = snapshot.data(options);
return {
    
                    type: data['type'],
    
                    status: data['status'],
    
                    title: data['title'],
    
                    detail: data['detail'],
    
                    instance: data['instance'],
    
                    code: data['code'],
    
            errors: data['errors'] ? (data['errors'] as Array<any>).map(item => {
                return ProblemDetailErrorsInnerModule.ProblemDetailErrorsInnerFirestoreConverter.fromFirestore(item, options);
                }) : [],
            
    } as ProblemDetail;
    }

};

