/**
 * Justice system APIs
 *
 * Contact: admin@spectrayan.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { Address } from './address';
import { PlaintiffType } from './plaintiff-type';
import { Phone } from './phone';
import { Gender } from './gender';
import { PersonTitle } from './person-title';


import * as AddressModule from './address';
import * as PlaintiffTypeModule from './plaintiff-type';
import * as PhoneModule from './phone';
import * as GenderModule from './gender';
import * as PersonTitleModule from './person-title';
import {FormArray, FormControl, FormGroup, Validators} from "@angular/forms";
import {DocumentData, QueryDocumentSnapshot, SnapshotOptions, Timestamp} from "@angular/fire/firestore";

export interface Plaintiff { 
        /**
        * Unique document id auto generated
        */
        readonly id?: string;
    
        /**
        * The principal that created the entity containing the field.
        */
        readonly createdBy?: string;
    
        /**
        * The date and time the entity containing the field was created.
        */
        readonly createdAt?: Date;
    
        /**
        * The principal that recently modified the entity containing the field.
        */
        readonly updatedBy?: string;
    
        /**
        * The date the entity containing the field was recently modified.
        */
        readonly updatedAt?: Date;
    
        title?: PersonTitle;
    
        /**
        * Person\'s first name.
        */
        firstName: string;
    
        /**
        * Person\'s middle name.
        */
        middleName?: string;
    
        /**
        * Person\'s last name.
        */
        lastName: string;
    
        gender?: Gender;
    
        type: PlaintiffType;
    
        address?: Address;
    
        phoneNumber?: Phone;
    
        /**
        * Plaintiff\'s email address
        */
        email?: string;
    
        /**
        * Description of the plaintiff\'s claim
        */
        claimDescription?: string;
    
        /**
        * Amount of damages requested
        */
        damagesRequested?: number;
    
        /**
        * ID of the lawyer representing the plaintiff
        */
        lawyerId?: string;
    
}

export type PlaintiffFormType = FormGroup<{ 
    title: FormControl<PersonTitle|null>;

    firstName: FormControl<string>;

    middleName: FormControl<string|null>;

    lastName: FormControl<string>;

    gender: FormControl<Gender|null>;

    type: FormControl<PlaintiffType>;

    address: AddressModule.AddressFormType;
    
    phoneNumber: PhoneModule.PhoneFormType;
    
    email: FormControl<string|null>;

    claimDescription: FormControl<string|null>;

    damagesRequested: FormControl<number|null>;

    lawyerId: FormControl<string|null>;
 }>

export function getPlaintiffForm(): PlaintiffFormType {
    return new FormGroup({ 





    title: new FormControl<PersonTitle>("Mr.", {  nonNullable:   false ,
    validators: [ ] } ),
    

    firstName: new FormControl<string>("", {  nonNullable:  true  ,
    validators: [  Validators.required,  Validators.minLength(1), Validators.maxLength(12),] } ),
    

    middleName: new FormControl<string>("", {  nonNullable:   false ,
    validators: [ ] } ),
    

    lastName: new FormControl<string>("", {  nonNullable:  true  ,
    validators: [  Validators.required,  Validators.minLength(1),] } ),
    

    gender: new FormControl<Gender>("Decline To Identify", {  nonNullable:   false ,
    validators: [ ] } ),
    

    type: new FormControl<PlaintiffType>("Individual", {  nonNullable:  true  ,
    validators: [  Validators.required, ] } ),
    

    address: AddressModule.getAddressForm(),


    phoneNumber: PhoneModule.getPhoneForm(),


    email: new FormControl<string>("", {  nonNullable:   false ,
    validators: [  Validators.email,] } ),
    

    claimDescription: new FormControl<string>("", {  nonNullable:   false ,
    validators: [ ] } ),
    

    damagesRequested: new FormControl<number>(0.0, {  nonNullable:   false ,
    validators: [  Validators.min(0),] } ),
    

    lawyerId: new FormControl<string>("", {  nonNullable:   false ,
    validators: [ ] } ),
    
    })
}


// Firestore data converter for Plaintiff
export const PlaintiffFirestoreConverter = {
toFirestore(modelObject: Plaintiff): DocumentData {
const result: DocumentData = {};
        if (modelObject.createdBy !== undefined) {
                    result['createdBy'] = modelObject.createdBy;
        }
        if (modelObject.createdAt !== undefined) {
                    result['createdAt'] = modelObject.createdAt;
        }
        if (modelObject.updatedBy !== undefined) {
                    result['updatedBy'] = modelObject.updatedBy;
        }
        if (modelObject.updatedAt !== undefined) {
                    result['updatedAt'] = modelObject.updatedAt;
        }
        if (modelObject.title !== undefined) {
        
        result['title'] = modelObject.title;
        }
        if (modelObject.firstName !== undefined) {
                    result['firstName'] = modelObject.firstName;
        }
        if (modelObject.middleName !== undefined) {
                    result['middleName'] = modelObject.middleName;
        }
        if (modelObject.lastName !== undefined) {
                    result['lastName'] = modelObject.lastName;
        }
        if (modelObject.gender !== undefined) {
        
        result['gender'] = modelObject.gender;
        }
        if (modelObject.type !== undefined) {
        
        result['type'] = modelObject.type;
        }
        if (modelObject.address !== undefined) {
        
        result['address'] = modelObject.address;
        }
        if (modelObject.phoneNumber !== undefined) {
        
        result['phoneNumber'] = modelObject.phoneNumber;
        }
        if (modelObject.email !== undefined) {
                    result['email'] = modelObject.email;
        }
        if (modelObject.claimDescription !== undefined) {
                    result['claimDescription'] = modelObject.claimDescription;
        }
        if (modelObject.damagesRequested !== undefined) {
                    result['damagesRequested'] = modelObject.damagesRequested;
        }
        if (modelObject.lawyerId !== undefined) {
                    result['lawyerId'] = modelObject.lawyerId;
        }
return result;
},
fromFirestore(snapshot: QueryDocumentSnapshot, options: SnapshotOptions): Plaintiff {
const data = snapshot.data(options);
return {
    id: snapshot.id,
    
                    createdBy: data['createdBy'],
    
                    createdAt: data['createdAt'] ? (data['createdAt'] as Timestamp).toDate() : undefined,
    
                    updatedBy: data['updatedBy'],
    
                    updatedAt: data['updatedAt'] ? (data['updatedAt'] as Timestamp).toDate() : undefined,
    
            
            title: data['title'],
    
                    firstName: data['firstName'],
    
                    middleName: data['middleName'],
    
                    lastName: data['lastName'],
    
            
            gender: data['gender'],
    
            
            type: data['type'],
    
            
            address: data['address'],
    
            
            phoneNumber: data['phoneNumber'],
    
                    email: data['email'],
    
                    claimDescription: data['claimDescription'],
    
                    damagesRequested: data['damagesRequested'],
    
                    lawyerId: data['lawyerId'],
    } as Plaintiff;
    }

};

