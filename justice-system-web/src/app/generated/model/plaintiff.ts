/**
 * Justice system APIs
 *
 * Contact: admin@spectrayan.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { Disability } from './disability';
import { Address } from './address';
import { PlaintiffType } from './plaintiff-type';
import { Phone } from './phone';
import { EmotionalIntelligence } from './emotional-intelligence';
import { Personality } from './personality';
import { Gender } from './gender';
import { SocialBehavior } from './social-behavior';
import { Identity } from './identity';
import { PhysicalTraits } from './physical-traits';
import { PersonTitle } from './person-title';


import * as DisabilityModule from './disability';
import * as AddressModule from './address';
import * as PlaintiffTypeModule from './plaintiff-type';
import * as PhoneModule from './phone';
import * as EmotionalIntelligenceModule from './emotional-intelligence';
import * as PersonalityModule from './personality';
import * as GenderModule from './gender';
import * as SocialBehaviorModule from './social-behavior';
import * as IdentityModule from './identity';
import * as PhysicalTraitsModule from './physical-traits';
import * as PersonTitleModule from './person-title';
import {FormArray, FormControl, FormGroup, Validators} from "@angular/forms";
import {DocumentData, QueryDocumentSnapshot, SnapshotOptions, Timestamp} from "@angular/fire/firestore";

export interface Plaintiff {
        /**
        * Unique document id auto generated
        */
        readonly id?: string;

        /**
        * The principal that created the entity containing the field.
        */
        readonly createdBy?: string;

        /**
        * The date and time the entity containing the field was created.
        */
        readonly createdAt?: Date;

        /**
        * The principal that recently modified the entity containing the field.
        */
        readonly updatedBy?: string;

        /**
        * The date the entity containing the field was recently modified.
        */
        readonly updatedAt?: Date;

        title?: PersonTitle;

        /**
        * Person\'s first name.
        */
        firstName: string;

        /**
        * Person\'s middle name.
        */
        middleName?: string;

        /**
        * Person\'s last name.
        */
        lastName: string;

        gender?: Gender;

        identity?: Identity;

        personality?: Personality;

        emotionalIntelligence?: EmotionalIntelligence;

        physicalTraits?: PhysicalTraits;

        socialBehavior?: SocialBehavior;

        disability?: Disability;

        /**
        * General information or biography about the person.
        */
        about?: string;

        type: PlaintiffType;

        address?: Address;

        phoneNumber?: Phone;

        /**
        * Plaintiff\'s email address
        */
        email?: string;

        /**
        * Description of the plaintiff\'s claim
        */
        claimDescription?: string;

        /**
        * Amount of damages requested
        */
        damagesRequested?: number;

        /**
        * ID of the lawyer representing the plaintiff
        */
        lawyerId?: string;

}

export type PlaintiffFormType = FormGroup<{
    title: FormControl<PersonTitle|null>;

    firstName: FormControl<string>;

    middleName: FormControl<string|null>;

    lastName: FormControl<string>;

    gender: FormControl<Gender|null>;

    identity: IdentityModule.IdentityFormType;

    personality: PersonalityModule.PersonalityFormType;

    emotionalIntelligence: EmotionalIntelligenceModule.EmotionalIntelligenceFormType;

    physicalTraits: PhysicalTraitsModule.PhysicalTraitsFormType;

    socialBehavior: SocialBehaviorModule.SocialBehaviorFormType;

    disability: DisabilityModule.DisabilityFormType;

    about: FormControl<string|null>;

    type: FormControl<PlaintiffType>;

    address: AddressModule.AddressFormType;

    phoneNumber: PhoneModule.PhoneFormType;

    email: FormControl<string|null>;

    claimDescription: FormControl<string|null>;

    damagesRequested: FormControl<number|null>;

    lawyerId: FormControl<string|null>;
 }>

export function getPlaintiffForm(): PlaintiffFormType {
    return new FormGroup({





    title: new FormControl<PersonTitle>("Mr.", {  nonNullable:   false ,
    validators: [ ] } ),


    firstName: new FormControl<string>("", {  nonNullable:  true  ,
    validators: [  Validators.required,  Validators.minLength(1), Validators.maxLength(12),] } ),


    middleName: new FormControl<string>("", {  nonNullable:   false ,
    validators: [ ] } ),


    lastName: new FormControl<string>("", {  nonNullable:  true  ,
    validators: [  Validators.required,  Validators.minLength(1),] } ),


    gender: new FormControl<Gender>("Decline To Identify", {  nonNullable:   false ,
    validators: [ ] } ),


    identity: IdentityModule.getIdentityForm(),


    personality: PersonalityModule.getPersonalityForm(),


    emotionalIntelligence: EmotionalIntelligenceModule.getEmotionalIntelligenceForm(),


    physicalTraits: PhysicalTraitsModule.getPhysicalTraitsForm(),


    socialBehavior: SocialBehaviorModule.getSocialBehaviorForm(),


    disability: DisabilityModule.getDisabilityForm(),


    about: new FormControl<string>("", {  nonNullable:   false ,
    validators: [ ] } ),


    type: new FormControl<PlaintiffType>("INDIVIDUAL", {  nonNullable:  true  ,
    validators: [  Validators.required, ] } ),


    address: AddressModule.getAddressForm(),


    phoneNumber: PhoneModule.getPhoneForm(),


    email: new FormControl<string>("", {  nonNullable:   false ,
    validators: [  Validators.email,] } ),


    claimDescription: new FormControl<string>("", {  nonNullable:   false ,
    validators: [ ] } ),


    damagesRequested: new FormControl<number>(0.0, {  nonNullable:   false ,
    validators: [  Validators.min(0),] } ),


    lawyerId: new FormControl<string>("", {  nonNullable:   false ,
    validators: [ ] } ),

    })
}


// Firestore data converter for Plaintiff
export const PlaintiffFirestoreConverter = {
toFirestore(modelObject: Plaintiff): DocumentData {
const result: DocumentData = {};
        if (modelObject.createdBy !== undefined) {
                    result['createdBy'] = modelObject.createdBy;
        }
        if (modelObject.createdAt !== undefined) {
                    result['createdAt'] = modelObject.createdAt;
        }
        if (modelObject.updatedBy !== undefined) {
                    result['updatedBy'] = modelObject.updatedBy;
        }
        if (modelObject.updatedAt !== undefined) {
                    result['updatedAt'] = modelObject.updatedAt;
        }
        if (modelObject.title !== undefined) {

        result['title'] = modelObject.title;
        }
        if (modelObject.firstName !== undefined) {
                    result['firstName'] = modelObject.firstName;
        }
        if (modelObject.middleName !== undefined) {
                    result['middleName'] = modelObject.middleName;
        }
        if (modelObject.lastName !== undefined) {
                    result['lastName'] = modelObject.lastName;
        }
        if (modelObject.gender !== undefined) {

        result['gender'] = modelObject.gender;
        }
        if (modelObject.identity !== undefined) {

        result['identity'] = modelObject.identity;
        }
        if (modelObject.personality !== undefined) {

        result['personality'] = modelObject.personality;
        }
        if (modelObject.emotionalIntelligence !== undefined) {

        result['emotionalIntelligence'] = modelObject.emotionalIntelligence;
        }
        if (modelObject.physicalTraits !== undefined) {

        result['physicalTraits'] = modelObject.physicalTraits;
        }
        if (modelObject.socialBehavior !== undefined) {

        result['socialBehavior'] = modelObject.socialBehavior;
        }
        if (modelObject.disability !== undefined) {

        result['disability'] = modelObject.disability;
        }
        if (modelObject.about !== undefined) {
                    result['about'] = modelObject.about;
        }
        if (modelObject.type !== undefined) {

        result['type'] = modelObject.type;
        }
        if (modelObject.address !== undefined) {

        result['address'] = modelObject.address;
        }
        if (modelObject.phoneNumber !== undefined) {

        result['phoneNumber'] = modelObject.phoneNumber;
        }
        if (modelObject.email !== undefined) {
                    result['email'] = modelObject.email;
        }
        if (modelObject.claimDescription !== undefined) {
                    result['claimDescription'] = modelObject.claimDescription;
        }
        if (modelObject.damagesRequested !== undefined) {
                    result['damagesRequested'] = modelObject.damagesRequested;
        }
        if (modelObject.lawyerId !== undefined) {
                    result['lawyerId'] = modelObject.lawyerId;
        }
return result;
},
fromFirestore(snapshot: QueryDocumentSnapshot, options: SnapshotOptions): Plaintiff {
const data = snapshot.data(options);
return {
    id: snapshot.id,

                    createdBy: data['createdBy'],

                    createdAt: data['createdAt'] ? (data['createdAt'] as Timestamp).toDate() : undefined,

                    updatedBy: data['updatedBy'],

                    updatedAt: data['updatedAt'] ? (data['updatedAt'] as Timestamp).toDate() : undefined,


            title: data['title'],

                    firstName: data['firstName'],

                    middleName: data['middleName'],

                    lastName: data['lastName'],


            gender: data['gender'],


            identity: data['identity'],


            personality: data['personality'],


            emotionalIntelligence: data['emotionalIntelligence'],


            physicalTraits: data['physicalTraits'],


            socialBehavior: data['socialBehavior'],


            disability: data['disability'],

                    about: data['about'],


            type: data['type'],


            address: data['address'],


            phoneNumber: data['phoneNumber'],

                    email: data['email'],

                    claimDescription: data['claimDescription'],

                    damagesRequested: data['damagesRequested'],

                    lawyerId: data['lawyerId'],
    } as Plaintiff;
    }

};

