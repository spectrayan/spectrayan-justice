/**
 * Justice system APIs
 *
 * Contact: admin@spectrayan.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


/**
 * Person\'s disabilities and accessibility needs.
 */
import {FormArray, FormControl, FormGroup, Validators} from "@angular/forms";
import {DocumentData, QueryDocumentSnapshot, SnapshotOptions, Timestamp} from "@angular/fire/firestore";

export interface Disability { 
        /**
        * Types of disabilities the person has.
        */
        disabilityType: Array<string>;
    
        /**
        * Specific accessibility requirements or accommodations needed.
        */
        accessibilityNeeds?: Array<string>;
    
        /**
        * Strategies used to cope with the disability.
        */
        copingStrategies?: Array<string>;
    
        /**
        * Description of how the disability affects daily activities.
        */
        impactOnDailyLife?: string;
    
        /**
        * Assistive devices or technology used.
        */
        assistiveTechnology?: Array<string>;
    
        /**
        * History of accommodations provided in various settings.
        */
        accommodationHistory?: string;
    
        /**
        * Additional notes about the disability.
        */
        disabilityNotes?: string;
    
}

export type DisabilityFormType = FormGroup<{ 
    disabilityType: FormControl<Array<string>>;

    accessibilityNeeds: FormControl<Array<string>|null>;

    copingStrategies: FormControl<Array<string>|null>;

    impactOnDailyLife: FormControl<string|null>;

    assistiveTechnology: FormControl<Array<string>|null>;

    accommodationHistory: FormControl<string|null>;

    disabilityNotes: FormControl<string|null>;
 }>

export function getDisabilityForm(): DisabilityFormType {
    return new FormGroup({ 
    disabilityType: new FormControl<Array<string>>([], {  nonNullable:  true  ,
    validators: [  Validators.required, ] } ),
    

    accessibilityNeeds: new FormControl<Array<string>>([], {  nonNullable:   false ,
    validators: [ ] } ),
    

    copingStrategies: new FormControl<Array<string>>([], {  nonNullable:   false ,
    validators: [ ] } ),
    

    impactOnDailyLife: new FormControl<string>("", {  nonNullable:   false ,
    validators: [ ] } ),
    

    assistiveTechnology: new FormControl<Array<string>>([], {  nonNullable:   false ,
    validators: [ ] } ),
    

    accommodationHistory: new FormControl<string>("", {  nonNullable:   false ,
    validators: [ ] } ),
    

    disabilityNotes: new FormControl<string>("", {  nonNullable:   false ,
    validators: [ ] } ),
    
    })
}


// Firestore data converter for Disability
export const DisabilityFirestoreConverter = {
toFirestore(modelObject: Disability): DocumentData {
const result: DocumentData = {};
        if (modelObject.disabilityType !== undefined) {
                    result['disabilityType'] = modelObject.disabilityType;
        }
        if (modelObject.accessibilityNeeds !== undefined) {
                    result['accessibilityNeeds'] = modelObject.accessibilityNeeds;
        }
        if (modelObject.copingStrategies !== undefined) {
                    result['copingStrategies'] = modelObject.copingStrategies;
        }
        if (modelObject.impactOnDailyLife !== undefined) {
                    result['impactOnDailyLife'] = modelObject.impactOnDailyLife;
        }
        if (modelObject.assistiveTechnology !== undefined) {
                    result['assistiveTechnology'] = modelObject.assistiveTechnology;
        }
        if (modelObject.accommodationHistory !== undefined) {
                    result['accommodationHistory'] = modelObject.accommodationHistory;
        }
        if (modelObject.disabilityNotes !== undefined) {
                    result['disabilityNotes'] = modelObject.disabilityNotes;
        }
return result;
},
fromFirestore(snapshot: QueryDocumentSnapshot, options: SnapshotOptions): Disability {
const data = snapshot.data(options);
return {
    
                    disabilityType: data['disabilityType'],
    
                    accessibilityNeeds: data['accessibilityNeeds'],
    
                    copingStrategies: data['copingStrategies'],
    
                    impactOnDailyLife: data['impactOnDailyLife'],
    
                    assistiveTechnology: data['assistiveTechnology'],
    
                    accommodationHistory: data['accommodationHistory'],
    
                    disabilityNotes: data['disabilityNotes'],
    } as Disability;
    }

};

