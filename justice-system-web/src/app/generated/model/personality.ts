/**
 * Justice system APIs
 *
 * Contact: admin@spectrayan.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { PersonalityType } from './personality-type';
import { BigFiveTraits } from './big-five-traits';
import { StressResponse } from './stress-response';


/**
 * Person\'s personality traits and characteristics.
 */
import * as PersonalityTypeModule from './personality-type';
import * as BigFiveTraitsModule from './big-five-traits';
import * as StressResponseModule from './stress-response';
import {FormArray, FormControl, FormGroup, Validators} from "@angular/forms";
import {DocumentData, QueryDocumentSnapshot, SnapshotOptions, Timestamp} from "@angular/fire/firestore";

export interface Personality { 
        personalityType: PersonalityType;
    
        bigFiveTraits?: BigFiveTraits;
    
        /**
        * List of dominant personality traits.
        */
        dominantTraits?: Array<string>;
    
        /**
        * Score representing adaptability to new situations (1-10).
        */
        adaptability?: number;
    
        stressResponse?: StressResponse;
    
        /**
        * Additional notes about the person\'s personality.
        */
        personalityNotes?: string;
    
}

export type PersonalityFormType = FormGroup<{ 
    personalityType: FormControl<PersonalityType>;

    bigFiveTraits: BigFiveTraitsModule.BigFiveTraitsFormType;
    
    dominantTraits: FormControl<Array<string>|null>;

    adaptability: FormControl<number|null>;

    stressResponse: FormControl<StressResponse|null>;

    personalityNotes: FormControl<string|null>;
 }>

export function getPersonalityForm(): PersonalityFormType {
    return new FormGroup({ 
    personalityType: new FormControl<PersonalityType>("Introvert", {  nonNullable:  true  ,
    validators: [  Validators.required, ] } ),
    

    bigFiveTraits: BigFiveTraitsModule.getBigFiveTraitsForm(),


    dominantTraits: new FormControl<Array<string>>([], {  nonNullable:   false ,
    validators: [ ] } ),
    

    adaptability: new FormControl<number>(0, {  nonNullable:   false ,
    validators: [  Validators.min(1), Validators.max(10),] } ),
    

    stressResponse: new FormControl<StressResponse>("Fight", {  nonNullable:   false ,
    validators: [ ] } ),
    

    personalityNotes: new FormControl<string>("", {  nonNullable:   false ,
    validators: [ ] } ),
    
    })
}


// Firestore data converter for Personality
export const PersonalityFirestoreConverter = {
toFirestore(modelObject: Personality): DocumentData {
const result: DocumentData = {};
        if (modelObject.personalityType !== undefined) {
        
        result['personalityType'] = modelObject.personalityType;
        }
        if (modelObject.bigFiveTraits !== undefined) {
        
        result['bigFiveTraits'] = modelObject.bigFiveTraits;
        }
        if (modelObject.dominantTraits !== undefined) {
                    result['dominantTraits'] = modelObject.dominantTraits;
        }
        if (modelObject.adaptability !== undefined) {
                    result['adaptability'] = modelObject.adaptability;
        }
        if (modelObject.stressResponse !== undefined) {
        
        result['stressResponse'] = modelObject.stressResponse;
        }
        if (modelObject.personalityNotes !== undefined) {
                    result['personalityNotes'] = modelObject.personalityNotes;
        }
return result;
},
fromFirestore(snapshot: QueryDocumentSnapshot, options: SnapshotOptions): Personality {
const data = snapshot.data(options);
return {
    
            
            personalityType: data['personalityType'],
    
            
            bigFiveTraits: data['bigFiveTraits'],
    
                    dominantTraits: data['dominantTraits'],
    
                    adaptability: data['adaptability'],
    
            
            stressResponse: data['stressResponse'],
    
                    personalityNotes: data['personalityNotes'],
    } as Personality;
    }

};

