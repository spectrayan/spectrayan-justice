/**
 * Justice system APIs
 *
 * Contact: admin@spectrayan.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { EyeColor } from './eye-color';
import { PhysicalCondition } from './physical-condition';
import { HairColor } from './hair-color';
import { BloodType } from './blood-type';


/**
 * Person\'s physical characteristics.
 */
import * as EyeColorModule from './eye-color';
import * as PhysicalConditionModule from './physical-condition';
import * as HairColorModule from './hair-color';
import * as BloodTypeModule from './blood-type';
import {FormArray, FormControl, FormGroup, Validators} from "@angular/forms";
import {DocumentData, QueryDocumentSnapshot, SnapshotOptions, Timestamp} from "@angular/fire/firestore";

export interface PhysicalTraits { 
        /**
        * Height in centimeters.
        */
        height: number;
    
        /**
        * Weight in kilograms.
        */
        weight: number;
    
        eyeColor: EyeColor;
    
        hairColor: HairColor;
    
        bloodType?: BloodType;
    
        /**
        * List of distinguishing physical features.
        */
        distinguishingFeatures?: Array<string>;
    
        physicalCondition?: PhysicalCondition;
    
        /**
        * List of physical disabilities, if any.
        */
        disabilities?: Array<string>;
    
        /**
        * List of medical conditions, if any.
        */
        medicalConditions?: Array<string>;
    
}

export type PhysicalTraitsFormType = FormGroup<{ 
    height: FormControl<number>;

    weight: FormControl<number>;

    eyeColor: FormControl<EyeColor>;

    hairColor: FormControl<HairColor>;

    bloodType: FormControl<BloodType|null>;

    distinguishingFeatures: FormControl<Array<string>|null>;

    physicalCondition: FormControl<PhysicalCondition|null>;

    disabilities: FormControl<Array<string>|null>;

    medicalConditions: FormControl<Array<string>|null>;
 }>

export function getPhysicalTraitsForm(): PhysicalTraitsFormType {
    return new FormGroup({ 
    height: new FormControl<number>(0.0, {  nonNullable:  true  ,
    validators: [  Validators.required, ] } ),
    

    weight: new FormControl<number>(0.0, {  nonNullable:  true  ,
    validators: [  Validators.required, ] } ),
    

    eyeColor: new FormControl<EyeColor>("Brown", {  nonNullable:  true  ,
    validators: [  Validators.required, ] } ),
    

    hairColor: new FormControl<HairColor>("Black", {  nonNullable:  true  ,
    validators: [  Validators.required, ] } ),
    

    bloodType: new FormControl<BloodType>("A", {  nonNullable:   false ,
    validators: [ ] } ),
    

    distinguishingFeatures: new FormControl<Array<string>>([], {  nonNullable:   false ,
    validators: [ ] } ),
    

    physicalCondition: new FormControl<PhysicalCondition>("Excellent", {  nonNullable:   false ,
    validators: [ ] } ),
    

    disabilities: new FormControl<Array<string>>([], {  nonNullable:   false ,
    validators: [ ] } ),
    

    medicalConditions: new FormControl<Array<string>>([], {  nonNullable:   false ,
    validators: [ ] } ),
    
    })
}


// Firestore data converter for PhysicalTraits
export const PhysicalTraitsFirestoreConverter = {
toFirestore(modelObject: PhysicalTraits): DocumentData {
const result: DocumentData = {};
        if (modelObject.height !== undefined) {
                    result['height'] = modelObject.height;
        }
        if (modelObject.weight !== undefined) {
                    result['weight'] = modelObject.weight;
        }
        if (modelObject.eyeColor !== undefined) {
        
        result['eyeColor'] = modelObject.eyeColor;
        }
        if (modelObject.hairColor !== undefined) {
        
        result['hairColor'] = modelObject.hairColor;
        }
        if (modelObject.bloodType !== undefined) {
        
        result['bloodType'] = modelObject.bloodType;
        }
        if (modelObject.distinguishingFeatures !== undefined) {
                    result['distinguishingFeatures'] = modelObject.distinguishingFeatures;
        }
        if (modelObject.physicalCondition !== undefined) {
        
        result['physicalCondition'] = modelObject.physicalCondition;
        }
        if (modelObject.disabilities !== undefined) {
                    result['disabilities'] = modelObject.disabilities;
        }
        if (modelObject.medicalConditions !== undefined) {
                    result['medicalConditions'] = modelObject.medicalConditions;
        }
return result;
},
fromFirestore(snapshot: QueryDocumentSnapshot, options: SnapshotOptions): PhysicalTraits {
const data = snapshot.data(options);
return {
    
                    height: data['height'],
    
                    weight: data['weight'],
    
            
            eyeColor: data['eyeColor'],
    
            
            hairColor: data['hairColor'],
    
            
            bloodType: data['bloodType'],
    
                    distinguishingFeatures: data['distinguishingFeatures'],
    
            
            physicalCondition: data['physicalCondition'],
    
                    disabilities: data['disabilities'],
    
                    medicalConditions: data['medicalConditions'],
    } as PhysicalTraits;
    }

};

