/**
 * Justice system APIs
 *
 * Contact: admin@spectrayan.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


/**
 * Person\'s emotional intelligence assessment.
 */
import {FormArray, FormControl, FormGroup, Validators} from "@angular/forms";
import {DocumentData, QueryDocumentSnapshot, SnapshotOptions, Timestamp} from "@angular/fire/firestore";

export interface EmotionalIntelligence { 
        /**
        * Score for self-awareness (1-100). Measures ability to recognize and understand one\'s own emotions.
        */
        selfAwareness: number;
    
        /**
        * Score for self-regulation (1-100). Measures ability to control and redirect disruptive emotions.
        */
        selfRegulation: number;
    
        /**
        * Score for motivation (1-100). Measures passion to work for reasons beyond money or status.
        */
        motivation: number;
    
        /**
        * Score for empathy (1-100). Measures ability to understand the emotional makeup of other people.
        */
        empathy: number;
    
        /**
        * Score for social skills (1-100). Measures proficiency in managing relationships and building networks.
        */
        socialSkills: number;
    
        /**
        * Overall emotional intelligence quotient (EQ) score (1-100).
        */
        overallEQScore?: number;
    
        /**
        * List of emotional strengths.
        */
        emotionalStrengths?: Array<string>;
    
        /**
        * List of emotional weaknesses or areas for improvement.
        */
        emotionalWeaknesses?: Array<string>;
    
        /**
        * The date when the emotional intelligence assessment was conducted.
        */
        assessmentDate?: Date;
    
}

export type EmotionalIntelligenceFormType = FormGroup<{ 
    selfAwareness: FormControl<number>;

    selfRegulation: FormControl<number>;

    motivation: FormControl<number>;

    empathy: FormControl<number>;

    socialSkills: FormControl<number>;

    overallEQScore: FormControl<number|null>;

    emotionalStrengths: FormControl<Array<string>|null>;

    emotionalWeaknesses: FormControl<Array<string>|null>;

    assessmentDate: FormControl<Date|null>;
 }>

export function getEmotionalIntelligenceForm(): EmotionalIntelligenceFormType {
    return new FormGroup({ 
    selfAwareness: new FormControl<number>(0, {  nonNullable:  true  ,
    validators: [  Validators.required,  Validators.min(1), Validators.max(100),] } ),
    

    selfRegulation: new FormControl<number>(0, {  nonNullable:  true  ,
    validators: [  Validators.required,  Validators.min(1), Validators.max(100),] } ),
    

    motivation: new FormControl<number>(0, {  nonNullable:  true  ,
    validators: [  Validators.required,  Validators.min(1), Validators.max(100),] } ),
    

    empathy: new FormControl<number>(0, {  nonNullable:  true  ,
    validators: [  Validators.required,  Validators.min(1), Validators.max(100),] } ),
    

    socialSkills: new FormControl<number>(0, {  nonNullable:  true  ,
    validators: [  Validators.required,  Validators.min(1), Validators.max(100),] } ),
    

    overallEQScore: new FormControl<number>(0, {  nonNullable:   false ,
    validators: [  Validators.min(1), Validators.max(100),] } ),
    

    emotionalStrengths: new FormControl<Array<string>>([], {  nonNullable:   false ,
    validators: [ ] } ),
    

    emotionalWeaknesses: new FormControl<Array<string>>([], {  nonNullable:   false ,
    validators: [ ] } ),
    

    assessmentDate: new FormControl<Date>(new Date(), {  nonNullable:   false ,
    validators: [ ] } ),
    
    })
}


// Firestore data converter for EmotionalIntelligence
export const EmotionalIntelligenceFirestoreConverter = {
toFirestore(modelObject: EmotionalIntelligence): DocumentData {
const result: DocumentData = {};
        if (modelObject.selfAwareness !== undefined) {
                    result['selfAwareness'] = modelObject.selfAwareness;
        }
        if (modelObject.selfRegulation !== undefined) {
                    result['selfRegulation'] = modelObject.selfRegulation;
        }
        if (modelObject.motivation !== undefined) {
                    result['motivation'] = modelObject.motivation;
        }
        if (modelObject.empathy !== undefined) {
                    result['empathy'] = modelObject.empathy;
        }
        if (modelObject.socialSkills !== undefined) {
                    result['socialSkills'] = modelObject.socialSkills;
        }
        if (modelObject.overallEQScore !== undefined) {
                    result['overallEQScore'] = modelObject.overallEQScore;
        }
        if (modelObject.emotionalStrengths !== undefined) {
                    result['emotionalStrengths'] = modelObject.emotionalStrengths;
        }
        if (modelObject.emotionalWeaknesses !== undefined) {
                    result['emotionalWeaknesses'] = modelObject.emotionalWeaknesses;
        }
        if (modelObject.assessmentDate !== undefined) {
                    result['assessmentDate'] = modelObject.assessmentDate;
        }
return result;
},
fromFirestore(snapshot: QueryDocumentSnapshot, options: SnapshotOptions): EmotionalIntelligence {
const data = snapshot.data(options);
return {
    
                    selfAwareness: data['selfAwareness'],
    
                    selfRegulation: data['selfRegulation'],
    
                    motivation: data['motivation'],
    
                    empathy: data['empathy'],
    
                    socialSkills: data['socialSkills'],
    
                    overallEQScore: data['overallEQScore'],
    
                    emotionalStrengths: data['emotionalStrengths'],
    
                    emotionalWeaknesses: data['emotionalWeaknesses'],
    
                assessmentDate: data['assessmentDate'] ? (data['assessmentDate'] as Timestamp).toDate() : undefined,
    } as EmotionalIntelligence;
    }

};

