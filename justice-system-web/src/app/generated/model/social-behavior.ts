/**
 * Justice system APIs
 *
 * Contact: admin@spectrayan.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { ConflictResolutionStyle } from './conflict-resolution-style';
import { TrustLevel } from './trust-level';
import { LeadershipStyle } from './leadership-style';
import { SocialNetworkSize } from './social-network-size';
import { CommunicationStyle } from './communication-style';


/**
 * Person\'s social behavior patterns.
 */
import * as ConflictResolutionStyleModule from './conflict-resolution-style';
import * as TrustLevelModule from './trust-level';
import * as LeadershipStyleModule from './leadership-style';
import * as SocialNetworkSizeModule from './social-network-size';
import * as CommunicationStyleModule from './communication-style';
import {FormArray, FormControl, FormGroup, Validators} from "@angular/forms";
import {DocumentData, QueryDocumentSnapshot, SnapshotOptions, Timestamp} from "@angular/fire/firestore";

export interface SocialBehavior {
        communicationStyle: CommunicationStyle;

        socialNetworkSize?: SocialNetworkSize;

        conflictResolutionStyle: ConflictResolutionStyle;

        leadershipStyle?: LeadershipStyle;

        /**
        * Score for ability to work in teams (1-100).
        */
        teamworkAbility: number;

        /**
        * Score for ability to influence others (1-100).
        */
        socialInfluence?: number;

        trustLevel?: TrustLevel;

        /**
        * Score for adaptability in social situations (1-100).
        */
        socialAdaptability?: number;

        /**
        * Score for sensitivity to cultural differences (1-100).
        */
        culturalSensitivity?: number;

        /**
        * Additional notes about social behavior.
        */
        socialBehaviorNotes?: string;

}

export type SocialBehaviorFormType = FormGroup<{
    communicationStyle: FormControl<CommunicationStyle>;

    socialNetworkSize: FormControl<SocialNetworkSize|null>;

    conflictResolutionStyle: FormControl<ConflictResolutionStyle>;

    leadershipStyle: FormControl<LeadershipStyle|null>;

    teamworkAbility: FormControl<number>;

    socialInfluence: FormControl<number|null>;

    trustLevel: FormControl<TrustLevel|null>;

    socialAdaptability: FormControl<number|null>;

    culturalSensitivity: FormControl<number|null>;

    socialBehaviorNotes: FormControl<string|null>;
 }>

export function getSocialBehaviorForm(): SocialBehaviorFormType {
    return new FormGroup({
    communicationStyle: new FormControl<CommunicationStyle>("Assertive", {  nonNullable:  true  ,
    validators: [  Validators.required, ] } ),


    socialNetworkSize: new FormControl<SocialNetworkSize>("Very Small", {  nonNullable:   false ,
    validators: [ ] } ),


    conflictResolutionStyle: new FormControl<ConflictResolutionStyle>("Avoiding", {  nonNullable:  true  ,
    validators: [  Validators.required, ] } ),


    leadershipStyle: new FormControl<LeadershipStyle>("Autocratic", {  nonNullable:   false ,
    validators: [ ] } ),


    teamworkAbility: new FormControl<number>(0, {  nonNullable:  true  ,
    validators: [  Validators.required,  Validators.min(1), Validators.max(100),] } ),


    socialInfluence: new FormControl<number>(0, {  nonNullable:   false ,
    validators: [  Validators.min(1), Validators.max(100),] } ),


    trustLevel: new FormControl<TrustLevel>("Very Low", {  nonNullable:   false ,
    validators: [ ] } ),


    socialAdaptability: new FormControl<number>(0, {  nonNullable:   false ,
    validators: [  Validators.min(1), Validators.max(100),] } ),


    culturalSensitivity: new FormControl<number>(0, {  nonNullable:   false ,
    validators: [  Validators.min(1), Validators.max(100),] } ),


    socialBehaviorNotes: new FormControl<string>("", {  nonNullable:   false ,
    validators: [ ] } ),

    })
}


// Firestore data converter for SocialBehavior
export const SocialBehaviorFirestoreConverter = {
toFirestore(modelObject: SocialBehavior): DocumentData {
const result: DocumentData = {};
        if (modelObject.communicationStyle !== undefined) {

        result['communicationStyle'] = modelObject.communicationStyle;
        }
        if (modelObject.socialNetworkSize !== undefined) {

        result['socialNetworkSize'] = modelObject.socialNetworkSize;
        }
        if (modelObject.conflictResolutionStyle !== undefined) {

        result['conflictResolutionStyle'] = modelObject.conflictResolutionStyle;
        }
        if (modelObject.leadershipStyle !== undefined) {

        result['leadershipStyle'] = modelObject.leadershipStyle;
        }
        if (modelObject.teamworkAbility !== undefined) {
                    result['teamworkAbility'] = modelObject.teamworkAbility;
        }
        if (modelObject.socialInfluence !== undefined) {
                    result['socialInfluence'] = modelObject.socialInfluence;
        }
        if (modelObject.trustLevel !== undefined) {

        result['trustLevel'] = modelObject.trustLevel;
        }
        if (modelObject.socialAdaptability !== undefined) {
                    result['socialAdaptability'] = modelObject.socialAdaptability;
        }
        if (modelObject.culturalSensitivity !== undefined) {
                    result['culturalSensitivity'] = modelObject.culturalSensitivity;
        }
        if (modelObject.socialBehaviorNotes !== undefined) {
                    result['socialBehaviorNotes'] = modelObject.socialBehaviorNotes;
        }
return result;
},
fromFirestore(snapshot: QueryDocumentSnapshot, options: SnapshotOptions): SocialBehavior {
const data = snapshot.data(options);
return {


            communicationStyle: data['communicationStyle'],


            socialNetworkSize: data['socialNetworkSize'],


            conflictResolutionStyle: data['conflictResolutionStyle'],


            leadershipStyle: data['leadershipStyle'],

                    teamworkAbility: data['teamworkAbility'],

                    socialInfluence: data['socialInfluence'],


            trustLevel: data['trustLevel'],

                    socialAdaptability: data['socialAdaptability'],

                    culturalSensitivity: data['culturalSensitivity'],

                    socialBehaviorNotes: data['socialBehaviorNotes'],
    } as SocialBehavior;
    }

};

