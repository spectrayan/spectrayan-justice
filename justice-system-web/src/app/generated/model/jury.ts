/**
 * Justice system APIs
 *
 * Contact: admin@spectrayan.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { JuryStatus } from './jury-status';


import * as JuryStatusModule from './jury-status';
import {FormArray, FormControl, FormGroup, Validators} from "@angular/forms";
import {DocumentData, QueryDocumentSnapshot, SnapshotOptions, Timestamp} from "@angular/fire/firestore";

export interface Jury {
        /**
        * Unique document id auto generated
        */
        readonly id?: string;

        /**
        * The principal that created the entity containing the field.
        */
        readonly createdBy?: string;

        /**
        * The date and time the entity containing the field was created.
        */
        readonly createdAt?: Date;

        /**
        * The principal that recently modified the entity containing the field.
        */
        readonly updatedBy?: string;

        /**
        * The date the entity containing the field was recently modified.
        */
        readonly updatedAt?: Date;

        /**
        * Name or identifier for the jury
        */
        name: string;

        /**
        * List of juror IDs that make up this jury
        */
        jurorIds: Array<string>;

        /**
        * ID of the juror who is the foreman
        */
        foremanId?: string;

        /**
        * Number of jurors in the jury
        */
        size?: number;

        status?: JuryStatus;

}

export type JuryFormType = FormGroup<{
    name: FormControl<string>;

    jurorIds: FormControl<Array<string>>;

    foremanId: FormControl<string|null>;

    size: FormControl<number|null>;

    status: FormControl<JuryStatus|null>;
 }>

export function getJuryForm(): JuryFormType {
    return new FormGroup({





    name: new FormControl<string>("", {  nonNullable:  true  ,
    validators: [  Validators.required, ] } ),


    jurorIds: new FormControl<Array<string>>([], {  nonNullable:  true  ,
    validators: [  Validators.required, ] } ),


    foremanId: new FormControl<string>("", {  nonNullable:   false ,
    validators: [ ] } ),


    size: new FormControl<number>(0, {  nonNullable:   false ,
    validators: [  Validators.min(1),] } ),


    status: new FormControl<JuryStatus>("SELECTION", {  nonNullable:   false ,
    validators: [ ] } ),

    })
}


// Firestore data converter for Jury
export const JuryFirestoreConverter = {
toFirestore(modelObject: Jury): DocumentData {
const result: DocumentData = {};
        if (modelObject.createdBy !== undefined) {
                    result['createdBy'] = modelObject.createdBy;
        }
        if (modelObject.createdAt !== undefined) {
                    result['createdAt'] = modelObject.createdAt;
        }
        if (modelObject.updatedBy !== undefined) {
                    result['updatedBy'] = modelObject.updatedBy;
        }
        if (modelObject.updatedAt !== undefined) {
                    result['updatedAt'] = modelObject.updatedAt;
        }
        if (modelObject.name !== undefined) {
                    result['name'] = modelObject.name;
        }
        if (modelObject.jurorIds !== undefined) {
                    result['jurorIds'] = modelObject.jurorIds;
        }
        if (modelObject.foremanId !== undefined) {
                    result['foremanId'] = modelObject.foremanId;
        }
        if (modelObject.size !== undefined) {
                    result['size'] = modelObject.size;
        }
        if (modelObject.status !== undefined) {

        result['status'] = modelObject.status;
        }
return result;
},
fromFirestore(snapshot: QueryDocumentSnapshot, options: SnapshotOptions): Jury {
const data = snapshot.data(options);
return {
    id: snapshot.id,

                    createdBy: data['createdBy'],

                    createdAt: data['createdAt'] ? (data['createdAt'] as Timestamp).toDate() : undefined,

                    updatedBy: data['updatedBy'],

                    updatedAt: data['updatedAt'] ? (data['updatedAt'] as Timestamp).toDate() : undefined,

                    name: data['name'],

                    jurorIds: data['jurorIds'],

                    foremanId: data['foremanId'],

                    size: data['size'],


            status: data['status'],
    } as Jury;
    }

};

