/**
 * Justice system APIs
 *
 * Contact: admin@spectrayan.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { CourtType } from './court-type';
import { Address } from './address';
import { Phone } from './phone';


import * as CourtTypeModule from './court-type';
import * as AddressModule from './address';
import * as PhoneModule from './phone';
import {FormArray, FormControl, FormGroup, Validators} from "@angular/forms";
import {DocumentData, QueryDocumentSnapshot, SnapshotOptions, Timestamp} from "@angular/fire/firestore";

export interface Court { 
        /**
        * Unique document id auto generated
        */
        readonly id?: string;
    
        /**
        * The principal that created the entity containing the field.
        */
        readonly createdBy?: string;
    
        /**
        * The date and time the entity containing the field was created.
        */
        readonly createdAt?: Date;
    
        /**
        * The principal that recently modified the entity containing the field.
        */
        readonly updatedBy?: string;
    
        /**
        * The date the entity containing the field was recently modified.
        */
        readonly updatedAt?: Date;
    
        /**
        * Name of the court
        */
        name: string;
    
        type: CourtType;
    
        /**
        * Jurisdiction of the court
        */
        jurisdiction: string;
    
        address?: Address;
    
        phoneNumber?: Phone;
    
        /**
        * Court\'s email address
        */
        email?: string;
    
}

export type CourtFormType = FormGroup<{ 
    name: FormControl<string>;

    type: FormControl<CourtType>;

    jurisdiction: FormControl<string>;

    address: AddressModule.AddressFormType;
    
    phoneNumber: PhoneModule.PhoneFormType;
    
    email: FormControl<string|null>;
 }>

export function getCourtForm(): CourtFormType {
    return new FormGroup({ 





    name: new FormControl<string>("", {  nonNullable:  true  ,
    validators: [  Validators.required,  Validators.minLength(1),] } ),
    

    type: new FormControl<CourtType>("Supreme", {  nonNullable:  true  ,
    validators: [  Validators.required, ] } ),
    

    jurisdiction: new FormControl<string>("", {  nonNullable:  true  ,
    validators: [  Validators.required, ] } ),
    

    address: AddressModule.getAddressForm(),


    phoneNumber: PhoneModule.getPhoneForm(),


    email: new FormControl<string>("", {  nonNullable:   false ,
    validators: [  Validators.email,] } ),
    
    })
}


// Firestore data converter for Court
export const CourtFirestoreConverter = {
toFirestore(modelObject: Court): DocumentData {
const result: DocumentData = {};
        if (modelObject.createdBy !== undefined) {
                    result['createdBy'] = modelObject.createdBy;
        }
        if (modelObject.createdAt !== undefined) {
                    result['createdAt'] = modelObject.createdAt;
        }
        if (modelObject.updatedBy !== undefined) {
                    result['updatedBy'] = modelObject.updatedBy;
        }
        if (modelObject.updatedAt !== undefined) {
                    result['updatedAt'] = modelObject.updatedAt;
        }
        if (modelObject.name !== undefined) {
                    result['name'] = modelObject.name;
        }
        if (modelObject.type !== undefined) {
        
        result['type'] = modelObject.type;
        }
        if (modelObject.jurisdiction !== undefined) {
                    result['jurisdiction'] = modelObject.jurisdiction;
        }
        if (modelObject.address !== undefined) {
        
        result['address'] = modelObject.address;
        }
        if (modelObject.phoneNumber !== undefined) {
        
        result['phoneNumber'] = modelObject.phoneNumber;
        }
        if (modelObject.email !== undefined) {
                    result['email'] = modelObject.email;
        }
return result;
},
fromFirestore(snapshot: QueryDocumentSnapshot, options: SnapshotOptions): Court {
const data = snapshot.data(options);
return {
    id: snapshot.id,
    
                    createdBy: data['createdBy'],
    
                    createdAt: data['createdAt'] ? (data['createdAt'] as Timestamp).toDate() : undefined,
    
                    updatedBy: data['updatedBy'],
    
                    updatedAt: data['updatedAt'] ? (data['updatedAt'] as Timestamp).toDate() : undefined,
    
                    name: data['name'],
    
            
            type: data['type'],
    
                    jurisdiction: data['jurisdiction'],
    
            
            address: data['address'],
    
            
            phoneNumber: data['phoneNumber'],
    
                    email: data['email'],
    } as Court;
    }

};

