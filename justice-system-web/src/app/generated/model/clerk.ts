/**
 * Justice system APIs
 *
 * Contact: admin@spectrayan.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { Phone } from './phone';
import { Gender } from './gender';
import { PersonTitle } from './person-title';


import * as PhoneModule from './phone';
import * as GenderModule from './gender';
import * as PersonTitleModule from './person-title';
import {FormArray, FormControl, FormGroup, Validators} from "@angular/forms";
import {DocumentData, QueryDocumentSnapshot, SnapshotOptions, Timestamp} from "@angular/fire/firestore";

export interface Clerk { 
        /**
        * Unique document id auto generated
        */
        readonly id?: string;
    
        /**
        * The principal that created the entity containing the field.
        */
        readonly createdBy?: string;
    
        /**
        * The date and time the entity containing the field was created.
        */
        readonly createdAt?: Date;
    
        /**
        * The principal that recently modified the entity containing the field.
        */
        readonly updatedBy?: string;
    
        /**
        * The date the entity containing the field was recently modified.
        */
        readonly updatedAt?: Date;
    
        title?: PersonTitle;
    
        /**
        * Person\'s first name.
        */
        firstName: string;
    
        /**
        * Person\'s middle name.
        */
        middleName?: string;
    
        /**
        * Person\'s last name.
        */
        lastName: string;
    
        gender?: Gender;
    
        /**
        * Position or title of the clerk
        */
        position: string;
    
        /**
        * Department the clerk works in
        */
        department?: string;
    
        /**
        * Clerk\'s email address
        */
        email?: string;
    
        phoneNumber?: Phone;
    
        /**
        * ID of the court the clerk is associated with
        */
        courtId: string;
    
        /**
        * Number of years the clerk has been in service
        */
        yearsOfService?: number;
    
}

export type ClerkFormType = FormGroup<{ 
    title: FormControl<PersonTitle|null>;

    firstName: FormControl<string>;

    middleName: FormControl<string|null>;

    lastName: FormControl<string>;

    gender: FormControl<Gender|null>;

    position: FormControl<string>;

    department: FormControl<string|null>;

    email: FormControl<string|null>;

    phoneNumber: PhoneModule.PhoneFormType;
    
    courtId: FormControl<string>;

    yearsOfService: FormControl<number|null>;
 }>

export function getClerkForm(): ClerkFormType {
    return new FormGroup({ 





    title: new FormControl<PersonTitle>("Mr.", {  nonNullable:   false ,
    validators: [ ] } ),
    

    firstName: new FormControl<string>("", {  nonNullable:  true  ,
    validators: [  Validators.required,  Validators.minLength(1), Validators.maxLength(12),] } ),
    

    middleName: new FormControl<string>("", {  nonNullable:   false ,
    validators: [ ] } ),
    

    lastName: new FormControl<string>("", {  nonNullable:  true  ,
    validators: [  Validators.required,  Validators.minLength(1),] } ),
    

    gender: new FormControl<Gender>("Decline To Identify", {  nonNullable:   false ,
    validators: [ ] } ),
    

    position: new FormControl<string>("", {  nonNullable:  true  ,
    validators: [  Validators.required, ] } ),
    

    department: new FormControl<string>("", {  nonNullable:   false ,
    validators: [ ] } ),
    

    email: new FormControl<string>("", {  nonNullable:   false ,
    validators: [  Validators.email,] } ),
    

    phoneNumber: PhoneModule.getPhoneForm(),


    courtId: new FormControl<string>("", {  nonNullable:  true  ,
    validators: [  Validators.required, ] } ),
    

    yearsOfService: new FormControl<number>(0, {  nonNullable:   false ,
    validators: [  Validators.min(0),] } ),
    
    })
}


// Firestore data converter for Clerk
export const ClerkFirestoreConverter = {
toFirestore(modelObject: Clerk): DocumentData {
const result: DocumentData = {};
        if (modelObject.createdBy !== undefined) {
                    result['createdBy'] = modelObject.createdBy;
        }
        if (modelObject.createdAt !== undefined) {
                    result['createdAt'] = modelObject.createdAt;
        }
        if (modelObject.updatedBy !== undefined) {
                    result['updatedBy'] = modelObject.updatedBy;
        }
        if (modelObject.updatedAt !== undefined) {
                    result['updatedAt'] = modelObject.updatedAt;
        }
        if (modelObject.title !== undefined) {
        
        result['title'] = modelObject.title;
        }
        if (modelObject.firstName !== undefined) {
                    result['firstName'] = modelObject.firstName;
        }
        if (modelObject.middleName !== undefined) {
                    result['middleName'] = modelObject.middleName;
        }
        if (modelObject.lastName !== undefined) {
                    result['lastName'] = modelObject.lastName;
        }
        if (modelObject.gender !== undefined) {
        
        result['gender'] = modelObject.gender;
        }
        if (modelObject.position !== undefined) {
                    result['position'] = modelObject.position;
        }
        if (modelObject.department !== undefined) {
                    result['department'] = modelObject.department;
        }
        if (modelObject.email !== undefined) {
                    result['email'] = modelObject.email;
        }
        if (modelObject.phoneNumber !== undefined) {
        
        result['phoneNumber'] = modelObject.phoneNumber;
        }
        if (modelObject.courtId !== undefined) {
                    result['courtId'] = modelObject.courtId;
        }
        if (modelObject.yearsOfService !== undefined) {
                    result['yearsOfService'] = modelObject.yearsOfService;
        }
return result;
},
fromFirestore(snapshot: QueryDocumentSnapshot, options: SnapshotOptions): Clerk {
const data = snapshot.data(options);
return {
    id: snapshot.id,
    
                    createdBy: data['createdBy'],
    
                    createdAt: data['createdAt'] ? (data['createdAt'] as Timestamp).toDate() : undefined,
    
                    updatedBy: data['updatedBy'],
    
                    updatedAt: data['updatedAt'] ? (data['updatedAt'] as Timestamp).toDate() : undefined,
    
            
            title: data['title'],
    
                    firstName: data['firstName'],
    
                    middleName: data['middleName'],
    
                    lastName: data['lastName'],
    
            
            gender: data['gender'],
    
                    position: data['position'],
    
                    department: data['department'],
    
                    email: data['email'],
    
            
            phoneNumber: data['phoneNumber'],
    
                    courtId: data['courtId'],
    
                    yearsOfService: data['yearsOfService'],
    } as Clerk;
    }

};

