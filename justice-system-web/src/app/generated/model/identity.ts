/**
 * Justice system APIs
 *
 * Contact: admin@spectrayan.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { Race } from './race';
import { Religion } from './religion';


/**
 * Person\'s demographic information including race, ethnicity, religion, etc.
 */
import * as RaceModule from './race';
import * as ReligionModule from './religion';
import {FormArray, FormControl, FormGroup, Validators} from "@angular/forms";
import {DocumentData, QueryDocumentSnapshot, SnapshotOptions, Timestamp} from "@angular/fire/firestore";

export interface Identity { 
        race: Race;
    
        /**
        * The person\'s ethnic background.
        */
        ethnicity: string;
    
        religion?: Religion;
    
        /**
        * The person\'s system of beliefs or principles.
        */
        creed?: string;
    
        /**
        * The person\'s cultural background or identity.
        */
        culture?: string;
    
        /**
        * The person\'s caste identification, if applicable.
        */
        caste?: string;
    
        /**
        * The person\'s primary language.
        */
        language?: string;
    
        /**
        * The person\'s skin color.
        */
        color?: string;
    
        /**
        * The person\'s nationality.
        */
        nationality?: string;
    
}

export type IdentityFormType = FormGroup<{ 
    race: FormControl<Race>;

    ethnicity: FormControl<string>;

    religion: FormControl<Religion|null>;

    creed: FormControl<string|null>;

    culture: FormControl<string|null>;

    caste: FormControl<string|null>;

    language: FormControl<string|null>;

    color: FormControl<string|null>;

    nationality: FormControl<string|null>;
 }>

export function getIdentityForm(): IdentityFormType {
    return new FormGroup({ 
    race: new FormControl<Race>("Asian", {  nonNullable:  true  ,
    validators: [  Validators.required, ] } ),
    

    ethnicity: new FormControl<string>("", {  nonNullable:  true  ,
    validators: [  Validators.required, ] } ),
    

    religion: new FormControl<Religion>("Christianity", {  nonNullable:   false ,
    validators: [ ] } ),
    

    creed: new FormControl<string>("", {  nonNullable:   false ,
    validators: [ ] } ),
    

    culture: new FormControl<string>("", {  nonNullable:   false ,
    validators: [ ] } ),
    

    caste: new FormControl<string>("", {  nonNullable:   false ,
    validators: [ ] } ),
    

    language: new FormControl<string>("", {  nonNullable:   false ,
    validators: [ ] } ),
    

    color: new FormControl<string>("", {  nonNullable:   false ,
    validators: [ ] } ),
    

    nationality: new FormControl<string>("", {  nonNullable:   false ,
    validators: [ ] } ),
    
    })
}


// Firestore data converter for Identity
export const IdentityFirestoreConverter = {
toFirestore(modelObject: Identity): DocumentData {
const result: DocumentData = {};
        if (modelObject.race !== undefined) {
        
        result['race'] = modelObject.race;
        }
        if (modelObject.ethnicity !== undefined) {
                    result['ethnicity'] = modelObject.ethnicity;
        }
        if (modelObject.religion !== undefined) {
        
        result['religion'] = modelObject.religion;
        }
        if (modelObject.creed !== undefined) {
                    result['creed'] = modelObject.creed;
        }
        if (modelObject.culture !== undefined) {
                    result['culture'] = modelObject.culture;
        }
        if (modelObject.caste !== undefined) {
                    result['caste'] = modelObject.caste;
        }
        if (modelObject.language !== undefined) {
                    result['language'] = modelObject.language;
        }
        if (modelObject.color !== undefined) {
                    result['color'] = modelObject.color;
        }
        if (modelObject.nationality !== undefined) {
                    result['nationality'] = modelObject.nationality;
        }
return result;
},
fromFirestore(snapshot: QueryDocumentSnapshot, options: SnapshotOptions): Identity {
const data = snapshot.data(options);
return {
    
            
            race: data['race'],
    
                    ethnicity: data['ethnicity'],
    
            
            religion: data['religion'],
    
                    creed: data['creed'],
    
                    culture: data['culture'],
    
                    caste: data['caste'],
    
                    language: data['language'],
    
                    color: data['color'],
    
                    nationality: data['nationality'],
    } as Identity;
    }

};

