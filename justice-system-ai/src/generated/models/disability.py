# coding: utf-8

"""
    Justice system APIs

    This is the OpenAPI Specification for justice system APIs. It provides a comprehensive suite of functionalities to interact with our platform. It is designed to be easy to use and integrate with various application environments. 

    The version of the OpenAPI document: 1.0.0
    Contact: admin@spectrayan.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class Disability(BaseModel):
    """
    Person's disabilities and accessibility needs.
    """ # noqa: E501
    disability_type: List[StrictStr] = Field(description="Types of disabilities the person has.", alias="disabilityType")
    accessibility_needs: Optional[List[StrictStr]] = Field(default=None, description="Specific accessibility requirements or accommodations needed.", alias="accessibilityNeeds")
    coping_strategies: Optional[List[StrictStr]] = Field(default=None, description="Strategies used to cope with the disability.", alias="copingStrategies")
    impact_on_daily_life: Optional[StrictStr] = Field(default=None, description="Description of how the disability affects daily activities.", alias="impactOnDailyLife")
    assistive_technology: Optional[List[StrictStr]] = Field(default=None, description="Assistive devices or technology used.", alias="assistiveTechnology")
    accommodation_history: Optional[StrictStr] = Field(default=None, description="History of accommodations provided in various settings.", alias="accommodationHistory")
    disability_notes: Optional[StrictStr] = Field(default=None, description="Additional notes about the disability.", alias="disabilityNotes")
    __properties: ClassVar[List[str]] = ["disabilityType", "accessibilityNeeds", "copingStrategies", "impactOnDailyLife", "assistiveTechnology", "accommodationHistory", "disabilityNotes"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Disability from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Disability from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "disabilityType": obj.get("disabilityType"),
            "accessibilityNeeds": obj.get("accessibilityNeeds"),
            "copingStrategies": obj.get("copingStrategies"),
            "impactOnDailyLife": obj.get("impactOnDailyLife"),
            "assistiveTechnology": obj.get("assistiveTechnology"),
            "accommodationHistory": obj.get("accommodationHistory"),
            "disabilityNotes": obj.get("disabilityNotes")
        })
        return _obj


