# coding: utf-8

"""
    Justice system APIs

    This is the OpenAPI Specification for justice system APIs. It provides a comprehensive suite of functionalities to interact with our platform. It is designed to be easy to use and integrate with various application environments. 

    The version of the OpenAPI document: 1.0.0
    Contact: admin@spectrayan.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from generated.models.race import Race
from generated.models.religion import Religion
from typing import Optional, Set
from typing_extensions import Self

class Identity(BaseModel):
    """
    Person's demographic information including race, ethnicity, religion, etc.
    """ # noqa: E501
    race: Race
    ethnicity: StrictStr = Field(description="The person's ethnic background.")
    religion: Optional[Religion] = None
    creed: Optional[StrictStr] = Field(default=None, description="The person's system of beliefs or principles.")
    culture: Optional[StrictStr] = Field(default=None, description="The person's cultural background or identity.")
    caste: Optional[StrictStr] = Field(default=None, description="The person's caste identification, if applicable.")
    language: Optional[StrictStr] = Field(default=None, description="The person's primary language.")
    color: Optional[StrictStr] = Field(default=None, description="The person's skin color.")
    nationality: Optional[StrictStr] = Field(default=None, description="The person's nationality.")
    __properties: ClassVar[List[str]] = ["race", "ethnicity", "religion", "creed", "culture", "caste", "language", "color", "nationality"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Identity from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Identity from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "race": obj.get("race"),
            "ethnicity": obj.get("ethnicity"),
            "religion": obj.get("religion"),
            "creed": obj.get("creed"),
            "culture": obj.get("culture"),
            "caste": obj.get("caste"),
            "language": obj.get("language"),
            "color": obj.get("color"),
            "nationality": obj.get("nationality")
        })
        return _obj


