# coding: utf-8

"""
    Justice system APIs

    This is the OpenAPI Specification for justice system APIs. It provides a comprehensive suite of functionalities to interact with our platform. It is designed to be easy to use and integrate with various application environments. 

    The version of the OpenAPI document: 1.0.0
    Contact: admin@spectrayan.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date, datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from generated.models.case_status import CaseStatus
from generated.models.case_type import CaseType
from typing import Optional, Set
from typing_extensions import Self

class Case(BaseModel):
    """
    Case
    """ # noqa: E501
    id: Optional[StrictStr] = Field(default=None, description="Unique document id auto generated")
    created_by: Optional[Annotated[str, Field(min_length=1, strict=True)]] = Field(default=None, description="The principal that created the entity containing the field.", alias="createdBy")
    created_at: Optional[datetime] = Field(default=None, description="The date and time the entity containing the field was created.", alias="createdAt")
    updated_by: Optional[Annotated[str, Field(min_length=1, strict=True)]] = Field(default=None, description="The principal that recently modified the entity containing the field.", alias="updatedBy")
    updated_at: Optional[datetime] = Field(default=None, description="The date the entity containing the field was recently modified.", alias="updatedAt")
    case_number: StrictStr = Field(description="Unique case number assigned by the court", alias="caseNumber")
    title: StrictStr = Field(description="Title or name of the case")
    description: Optional[StrictStr] = Field(default=None, description="Brief description of the case")
    type: CaseType
    status: Optional[CaseStatus] = CaseStatus.PENDING
    filing_date: date = Field(description="Date the case was filed", alias="filingDate")
    court_id: StrictStr = Field(description="ID of the court handling the case", alias="courtId")
    judge_id: Optional[StrictStr] = Field(default=None, description="ID of the judge presiding over the case", alias="judgeId")
    prosecutor_ids: Optional[List[StrictStr]] = Field(default=None, description="IDs of prosecutors assigned to the case", alias="prosecutorIds")
    defense_attorney_ids: Optional[List[StrictStr]] = Field(default=None, description="IDs of defense attorneys assigned to the case", alias="defenseAttorneyIds")
    defendant_ids: Optional[List[StrictStr]] = Field(default=None, description="IDs of defendants in the case", alias="defendantIds")
    plaintiff_ids: Optional[List[StrictStr]] = Field(default=None, description="IDs of plaintiffs in the case", alias="plaintiffIds")
    victim_ids: Optional[List[StrictStr]] = Field(default=None, description="IDs of victims in the case", alias="victimIds")
    witness_ids: Optional[List[StrictStr]] = Field(default=None, description="IDs of witnesses in the case", alias="witnessIds")
    jury_id: Optional[StrictStr] = Field(default=None, description="ID of the jury assigned to the case", alias="juryId")
    clerk_id: Optional[StrictStr] = Field(default=None, description="ID of the clerk assigned to the case", alias="clerkId")
    bailiff_id: Optional[StrictStr] = Field(default=None, description="ID of the bailiff assigned to the case", alias="bailiffId")
    reporter_id: Optional[StrictStr] = Field(default=None, description="ID of the court reporter assigned to the case", alias="reporterId")
    evidence_ids: Optional[List[StrictStr]] = Field(default=None, description="IDs of evidence associated with the case", alias="evidenceIds")
    hearing_dates: Optional[List[datetime]] = Field(default=None, description="Dates of scheduled hearings", alias="hearingDates")
    verdict: Optional[StrictStr] = Field(default=None, description="Verdict of the case if concluded")
    sentence_details: Optional[StrictStr] = Field(default=None, description="Details of the sentence if applicable", alias="sentenceDetails")
    __properties: ClassVar[List[str]] = ["id", "createdBy", "createdAt", "updatedBy", "updatedAt", "caseNumber", "title", "description", "type", "status", "filingDate", "courtId", "judgeId", "prosecutorIds", "defenseAttorneyIds", "defendantIds", "plaintiffIds", "victimIds", "witnessIds", "juryId", "clerkId", "bailiffId", "reporterId", "evidenceIds", "hearingDates", "verdict", "sentenceDetails"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Case from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "id",
            "created_by",
            "created_at",
            "updated_by",
            "updated_at",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Case from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "createdBy": obj.get("createdBy"),
            "createdAt": obj.get("createdAt"),
            "updatedBy": obj.get("updatedBy"),
            "updatedAt": obj.get("updatedAt"),
            "caseNumber": obj.get("caseNumber"),
            "title": obj.get("title"),
            "description": obj.get("description"),
            "type": obj.get("type"),
            "status": obj.get("status") if obj.get("status") is not None else CaseStatus.PENDING,
            "filingDate": obj.get("filingDate"),
            "courtId": obj.get("courtId"),
            "judgeId": obj.get("judgeId"),
            "prosecutorIds": obj.get("prosecutorIds"),
            "defenseAttorneyIds": obj.get("defenseAttorneyIds"),
            "defendantIds": obj.get("defendantIds"),
            "plaintiffIds": obj.get("plaintiffIds"),
            "victimIds": obj.get("victimIds"),
            "witnessIds": obj.get("witnessIds"),
            "juryId": obj.get("juryId"),
            "clerkId": obj.get("clerkId"),
            "bailiffId": obj.get("bailiffId"),
            "reporterId": obj.get("reporterId"),
            "evidenceIds": obj.get("evidenceIds"),
            "hearingDates": obj.get("hearingDates"),
            "verdict": obj.get("verdict"),
            "sentenceDetails": obj.get("sentenceDetails")
        })
        return _obj


