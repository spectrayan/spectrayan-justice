# coding: utf-8

"""
    Justice system APIs

    This is the OpenAPI Specification for justice system APIs. It provides a comprehensive suite of functionalities to interact with our platform. It is designed to be easy to use and integrate with various application environments. 

    The version of the OpenAPI document: 1.0.0
    Contact: admin@spectrayan.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from generated.models.address import Address
from generated.models.disability import Disability
from generated.models.emotional_intelligence import EmotionalIntelligence
from generated.models.gender import Gender
from generated.models.identity import Identity
from generated.models.person_title import PersonTitle
from generated.models.personality import Personality
from generated.models.phone import Phone
from generated.models.physical_traits import PhysicalTraits
from generated.models.plaintiff_type import PlaintiffType
from generated.models.social_behavior import SocialBehavior
from typing import Optional, Set
from typing_extensions import Self

class Plaintiff(BaseModel):
    """
    Plaintiff
    """ # noqa: E501
    id: Optional[StrictStr] = Field(default=None, description="Unique document id auto generated")
    created_by: Optional[Annotated[str, Field(min_length=1, strict=True)]] = Field(default=None, description="The principal that created the entity containing the field.", alias="createdBy")
    created_at: Optional[datetime] = Field(default=None, description="The date and time the entity containing the field was created.", alias="createdAt")
    updated_by: Optional[Annotated[str, Field(min_length=1, strict=True)]] = Field(default=None, description="The principal that recently modified the entity containing the field.", alias="updatedBy")
    updated_at: Optional[datetime] = Field(default=None, description="The date the entity containing the field was recently modified.", alias="updatedAt")
    title: Optional[PersonTitle] = None
    first_name: Annotated[str, Field(min_length=1, strict=True, max_length=12)] = Field(description="Person's first name.", alias="firstName")
    middle_name: Optional[StrictStr] = Field(default=None, description="Person's middle name.", alias="middleName")
    last_name: Annotated[str, Field(min_length=1, strict=True)] = Field(description="Person's last name.", alias="lastName")
    gender: Optional[Gender] = None
    identity: Optional[Identity] = None
    personality: Optional[Personality] = None
    emotional_intelligence: Optional[EmotionalIntelligence] = Field(default=None, alias="emotionalIntelligence")
    physical_traits: Optional[PhysicalTraits] = Field(default=None, alias="physicalTraits")
    social_behavior: Optional[SocialBehavior] = Field(default=None, alias="socialBehavior")
    disability: Optional[Disability] = None
    about: Optional[StrictStr] = Field(default=None, description="General information or biography about the person.")
    type: PlaintiffType
    address: Optional[Address] = None
    phone_number: Optional[Phone] = Field(default=None, alias="phoneNumber")
    email: Optional[StrictStr] = Field(default=None, description="Plaintiff's email address")
    claim_description: Optional[StrictStr] = Field(default=None, description="Description of the plaintiff's claim", alias="claimDescription")
    damages_requested: Optional[Union[Annotated[float, Field(strict=True, ge=0)], Annotated[int, Field(strict=True, ge=0)]]] = Field(default=None, description="Amount of damages requested", alias="damagesRequested")
    lawyer_id: Optional[StrictStr] = Field(default=None, description="ID of the lawyer representing the plaintiff", alias="lawyerId")
    __properties: ClassVar[List[str]] = ["id", "createdBy", "createdAt", "updatedBy", "updatedAt", "title", "firstName", "middleName", "lastName", "gender", "identity", "personality", "emotionalIntelligence", "physicalTraits", "socialBehavior", "disability", "about", "type", "address", "phoneNumber", "email", "claimDescription", "damagesRequested", "lawyerId"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Plaintiff from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "id",
            "created_by",
            "created_at",
            "updated_by",
            "updated_at",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of identity
        if self.identity:
            _dict['identity'] = self.identity.to_dict()
        # override the default output from pydantic by calling `to_dict()` of personality
        if self.personality:
            _dict['personality'] = self.personality.to_dict()
        # override the default output from pydantic by calling `to_dict()` of emotional_intelligence
        if self.emotional_intelligence:
            _dict['emotionalIntelligence'] = self.emotional_intelligence.to_dict()
        # override the default output from pydantic by calling `to_dict()` of physical_traits
        if self.physical_traits:
            _dict['physicalTraits'] = self.physical_traits.to_dict()
        # override the default output from pydantic by calling `to_dict()` of social_behavior
        if self.social_behavior:
            _dict['socialBehavior'] = self.social_behavior.to_dict()
        # override the default output from pydantic by calling `to_dict()` of disability
        if self.disability:
            _dict['disability'] = self.disability.to_dict()
        # override the default output from pydantic by calling `to_dict()` of address
        if self.address:
            _dict['address'] = self.address.to_dict()
        # override the default output from pydantic by calling `to_dict()` of phone_number
        if self.phone_number:
            _dict['phoneNumber'] = self.phone_number.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Plaintiff from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "createdBy": obj.get("createdBy"),
            "createdAt": obj.get("createdAt"),
            "updatedBy": obj.get("updatedBy"),
            "updatedAt": obj.get("updatedAt"),
            "title": obj.get("title"),
            "firstName": obj.get("firstName"),
            "middleName": obj.get("middleName"),
            "lastName": obj.get("lastName"),
            "gender": obj.get("gender"),
            "identity": Identity.from_dict(obj["identity"]) if obj.get("identity") is not None else None,
            "personality": Personality.from_dict(obj["personality"]) if obj.get("personality") is not None else None,
            "emotionalIntelligence": EmotionalIntelligence.from_dict(obj["emotionalIntelligence"]) if obj.get("emotionalIntelligence") is not None else None,
            "physicalTraits": PhysicalTraits.from_dict(obj["physicalTraits"]) if obj.get("physicalTraits") is not None else None,
            "socialBehavior": SocialBehavior.from_dict(obj["socialBehavior"]) if obj.get("socialBehavior") is not None else None,
            "disability": Disability.from_dict(obj["disability"]) if obj.get("disability") is not None else None,
            "about": obj.get("about"),
            "type": obj.get("type") if obj.get("type") is not None else PlaintiffType.INDIVIDUAL,
            "address": Address.from_dict(obj["address"]) if obj.get("address") is not None else None,
            "phoneNumber": Phone.from_dict(obj["phoneNumber"]) if obj.get("phoneNumber") is not None else None,
            "email": obj.get("email"),
            "claimDescription": obj.get("claimDescription"),
            "damagesRequested": obj.get("damagesRequested"),
            "lawyerId": obj.get("lawyerId")
        })
        return _obj


