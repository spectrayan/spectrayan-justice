# coding: utf-8

"""
    Justice system APIs

    This is the OpenAPI Specification for justice system APIs. It provides a comprehensive suite of functionalities to interact with our platform. It is designed to be easy to use and integrate with various application environments. 

    The version of the OpenAPI document: 1.0.0
    Contact: admin@spectrayan.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class BigFiveTraits(BaseModel):
    """
    BigFiveTraits
    """ # noqa: E501
    openness: Annotated[int, Field(le=100, strict=True, ge=1)] = Field(description="Score for openness to experience (1-100). Higher scores indicate greater openness to new experiences, creativity, and intellectual curiosity.")
    conscientiousness: Annotated[int, Field(le=100, strict=True, ge=1)] = Field(description="Score for conscientiousness (1-100). Higher scores indicate greater organization, responsibility, and self-discipline.")
    extraversion: Annotated[int, Field(le=100, strict=True, ge=1)] = Field(description="Score for extraversion (1-100). Higher scores indicate greater sociability, assertiveness, and energy.")
    agreeableness: Annotated[int, Field(le=100, strict=True, ge=1)] = Field(description="Score for agreeableness (1-100). Higher scores indicate greater compassion, cooperation, and consideration for others.")
    neuroticism: Annotated[int, Field(le=100, strict=True, ge=1)] = Field(description="Score for neuroticism (1-100). Higher scores indicate greater emotional instability and tendency toward negative emotions.")
    assessment_date: Optional[date] = Field(default=None, description="The date when the Big Five traits assessment was conducted.", alias="assessmentDate")
    assessment_method: Optional[StrictStr] = Field(default=None, description="The method or tool used to assess the Big Five traits.", alias="assessmentMethod")
    __properties: ClassVar[List[str]] = ["openness", "conscientiousness", "extraversion", "agreeableness", "neuroticism", "assessmentDate", "assessmentMethod"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of BigFiveTraits from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of BigFiveTraits from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "openness": obj.get("openness"),
            "conscientiousness": obj.get("conscientiousness"),
            "extraversion": obj.get("extraversion"),
            "agreeableness": obj.get("agreeableness"),
            "neuroticism": obj.get("neuroticism"),
            "assessmentDate": obj.get("assessmentDate"),
            "assessmentMethod": obj.get("assessmentMethod")
        })
        return _obj


