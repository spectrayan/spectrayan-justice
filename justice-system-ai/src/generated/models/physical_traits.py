# coding: utf-8

"""
    Justice system APIs

    This is the OpenAPI Specification for justice system APIs. It provides a comprehensive suite of functionalities to interact with our platform. It is designed to be easy to use and integrate with various application environments. 

    The version of the OpenAPI document: 1.0.0
    Contact: admin@spectrayan.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from generated.models.blood_type import BloodType
from generated.models.eye_color import EyeColor
from generated.models.hair_color import HairColor
from generated.models.physical_condition import PhysicalCondition
from typing import Optional, Set
from typing_extensions import Self

class PhysicalTraits(BaseModel):
    """
    Person's physical characteristics.
    """ # noqa: E501
    height: Union[StrictFloat, StrictInt] = Field(description="Height in centimeters.")
    weight: Union[StrictFloat, StrictInt] = Field(description="Weight in kilograms.")
    eye_color: EyeColor = Field(alias="eyeColor")
    hair_color: HairColor = Field(alias="hairColor")
    blood_type: Optional[BloodType] = Field(default=None, alias="bloodType")
    distinguishing_features: Optional[List[StrictStr]] = Field(default=None, description="List of distinguishing physical features.", alias="distinguishingFeatures")
    physical_condition: Optional[PhysicalCondition] = Field(default=None, alias="physicalCondition")
    disabilities: Optional[List[StrictStr]] = Field(default=None, description="List of physical disabilities, if any.")
    medical_conditions: Optional[List[StrictStr]] = Field(default=None, description="List of medical conditions, if any.", alias="medicalConditions")
    __properties: ClassVar[List[str]] = ["height", "weight", "eyeColor", "hairColor", "bloodType", "distinguishingFeatures", "physicalCondition", "disabilities", "medicalConditions"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PhysicalTraits from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PhysicalTraits from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "height": obj.get("height"),
            "weight": obj.get("weight"),
            "eyeColor": obj.get("eyeColor"),
            "hairColor": obj.get("hairColor"),
            "bloodType": obj.get("bloodType"),
            "distinguishingFeatures": obj.get("distinguishingFeatures"),
            "physicalCondition": obj.get("physicalCondition"),
            "disabilities": obj.get("disabilities"),
            "medicalConditions": obj.get("medicalConditions")
        })
        return _obj


