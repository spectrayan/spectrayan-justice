# coding: utf-8

"""
    Justice system APIs

    This is the OpenAPI Specification for justice system APIs. It provides a comprehensive suite of functionalities to interact with our platform. It is designed to be easy to use and integrate with various application environments. 

    The version of the OpenAPI document: 1.0.0
    Contact: admin@spectrayan.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from generated.models.communication_style import CommunicationStyle
from generated.models.conflict_resolution_style import ConflictResolutionStyle
from generated.models.leadership_style import LeadershipStyle
from generated.models.social_network_size import SocialNetworkSize
from generated.models.trust_level import TrustLevel
from typing import Optional, Set
from typing_extensions import Self

class SocialBehavior(BaseModel):
    """
    Person's social behavior patterns.
    """ # noqa: E501
    communication_style: CommunicationStyle = Field(alias="communicationStyle")
    social_network_size: Optional[SocialNetworkSize] = Field(default=None, alias="socialNetworkSize")
    conflict_resolution_style: ConflictResolutionStyle = Field(alias="conflictResolutionStyle")
    leadership_style: Optional[LeadershipStyle] = Field(default=None, alias="leadershipStyle")
    teamwork_ability: Annotated[int, Field(le=100, strict=True, ge=1)] = Field(description="Score for ability to work in teams (1-100).", alias="teamworkAbility")
    social_influence: Optional[Annotated[int, Field(le=100, strict=True, ge=1)]] = Field(default=None, description="Score for ability to influence others (1-100).", alias="socialInfluence")
    trust_level: Optional[TrustLevel] = Field(default=None, alias="trustLevel")
    social_adaptability: Optional[Annotated[int, Field(le=100, strict=True, ge=1)]] = Field(default=None, description="Score for adaptability in social situations (1-100).", alias="socialAdaptability")
    cultural_sensitivity: Optional[Annotated[int, Field(le=100, strict=True, ge=1)]] = Field(default=None, description="Score for sensitivity to cultural differences (1-100).", alias="culturalSensitivity")
    social_behavior_notes: Optional[StrictStr] = Field(default=None, description="Additional notes about social behavior.", alias="socialBehaviorNotes")
    __properties: ClassVar[List[str]] = ["communicationStyle", "socialNetworkSize", "conflictResolutionStyle", "leadershipStyle", "teamworkAbility", "socialInfluence", "trustLevel", "socialAdaptability", "culturalSensitivity", "socialBehaviorNotes"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SocialBehavior from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SocialBehavior from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "communicationStyle": obj.get("communicationStyle"),
            "socialNetworkSize": obj.get("socialNetworkSize"),
            "conflictResolutionStyle": obj.get("conflictResolutionStyle"),
            "leadershipStyle": obj.get("leadershipStyle"),
            "teamworkAbility": obj.get("teamworkAbility"),
            "socialInfluence": obj.get("socialInfluence"),
            "trustLevel": obj.get("trustLevel"),
            "socialAdaptability": obj.get("socialAdaptability"),
            "culturalSensitivity": obj.get("culturalSensitivity"),
            "socialBehaviorNotes": obj.get("socialBehaviorNotes")
        })
        return _obj


