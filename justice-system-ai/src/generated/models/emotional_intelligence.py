# coding: utf-8

"""
    Justice system APIs

    This is the OpenAPI Specification for justice system APIs. It provides a comprehensive suite of functionalities to interact with our platform. It is designed to be easy to use and integrate with various application environments. 

    The version of the OpenAPI document: 1.0.0
    Contact: admin@spectrayan.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class EmotionalIntelligence(BaseModel):
    """
    Person's emotional intelligence assessment.
    """ # noqa: E501
    self_awareness: Annotated[int, Field(le=100, strict=True, ge=1)] = Field(description="Score for self-awareness (1-100). Measures ability to recognize and understand one's own emotions.", alias="selfAwareness")
    self_regulation: Annotated[int, Field(le=100, strict=True, ge=1)] = Field(description="Score for self-regulation (1-100). Measures ability to control and redirect disruptive emotions.", alias="selfRegulation")
    motivation: Annotated[int, Field(le=100, strict=True, ge=1)] = Field(description="Score for motivation (1-100). Measures passion to work for reasons beyond money or status.")
    empathy: Annotated[int, Field(le=100, strict=True, ge=1)] = Field(description="Score for empathy (1-100). Measures ability to understand the emotional makeup of other people.")
    social_skills: Annotated[int, Field(le=100, strict=True, ge=1)] = Field(description="Score for social skills (1-100). Measures proficiency in managing relationships and building networks.", alias="socialSkills")
    overall_eq_score: Optional[Annotated[int, Field(le=100, strict=True, ge=1)]] = Field(default=None, description="Overall emotional intelligence quotient (EQ) score (1-100).", alias="overallEQScore")
    emotional_strengths: Optional[List[StrictStr]] = Field(default=None, description="List of emotional strengths.", alias="emotionalStrengths")
    emotional_weaknesses: Optional[List[StrictStr]] = Field(default=None, description="List of emotional weaknesses or areas for improvement.", alias="emotionalWeaknesses")
    assessment_date: Optional[date] = Field(default=None, description="The date when the emotional intelligence assessment was conducted.", alias="assessmentDate")
    __properties: ClassVar[List[str]] = ["selfAwareness", "selfRegulation", "motivation", "empathy", "socialSkills", "overallEQScore", "emotionalStrengths", "emotionalWeaknesses", "assessmentDate"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of EmotionalIntelligence from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of EmotionalIntelligence from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "selfAwareness": obj.get("selfAwareness"),
            "selfRegulation": obj.get("selfRegulation"),
            "motivation": obj.get("motivation"),
            "empathy": obj.get("empathy"),
            "socialSkills": obj.get("socialSkills"),
            "overallEQScore": obj.get("overallEQScore"),
            "emotionalStrengths": obj.get("emotionalStrengths"),
            "emotionalWeaknesses": obj.get("emotionalWeaknesses"),
            "assessmentDate": obj.get("assessmentDate")
        })
        return _obj


