# coding: utf-8

"""
    Justice system APIs

    This is the OpenAPI Specification for justice system APIs. It provides a comprehensive suite of functionalities to interact with our platform. It is designed to be easy to use and integrate with various application environments. 

    The version of the OpenAPI document: 1.0.0
    Contact: admin@spectrayan.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from generated.models.custody_record import CustodyRecord
from generated.models.evidence_all_of_digital_properties import EvidenceAllOfDigitalProperties
from generated.models.evidence_all_of_documentary_properties import EvidenceAllOfDocumentaryProperties
from generated.models.evidence_all_of_forensic_properties import EvidenceAllOfForensicProperties
from generated.models.evidence_all_of_physical_properties import EvidenceAllOfPhysicalProperties
from generated.models.evidence_type import EvidenceType
from typing import Optional, Set
from typing_extensions import Self

class Evidence(BaseModel):
    """
    Evidence
    """ # noqa: E501
    id: Optional[StrictStr] = Field(default=None, description="Unique document id auto generated")
    created_by: Optional[Annotated[str, Field(min_length=1, strict=True)]] = Field(default=None, description="The principal that created the entity containing the field.", alias="createdBy")
    created_at: Optional[datetime] = Field(default=None, description="The date and time the entity containing the field was created.", alias="createdAt")
    updated_by: Optional[Annotated[str, Field(min_length=1, strict=True)]] = Field(default=None, description="The principal that recently modified the entity containing the field.", alias="updatedBy")
    updated_at: Optional[datetime] = Field(default=None, description="The date the entity containing the field was recently modified.", alias="updatedAt")
    evidence_number: StrictStr = Field(description="Unique evidence number assigned by the system", alias="evidenceNumber")
    name: StrictStr = Field(description="Name or title of the evidence")
    description: Optional[StrictStr] = Field(default=None, description="Detailed description of the evidence")
    type: EvidenceType
    case_id: StrictStr = Field(description="ID of the case this evidence is associated with", alias="caseId")
    collection_date: datetime = Field(description="Date and time the evidence was collected", alias="collectionDate")
    collection_location: Optional[StrictStr] = Field(default=None, description="Location where the evidence was collected", alias="collectionLocation")
    collected_by_id: StrictStr = Field(description="ID of the person who collected the evidence", alias="collectedById")
    status: Optional[StrictStr] = Field(default=None, description="Current status of the evidence (e.g., in custody, analyzed, released)")
    storage_location: Optional[StrictStr] = Field(default=None, description="Current storage location of the evidence", alias="storageLocation")
    custody_chain: Optional[List[CustodyRecord]] = Field(default=None, description="Chain of custody records for the evidence", alias="custodyChain")
    physical_properties: Optional[EvidenceAllOfPhysicalProperties] = Field(default=None, alias="physicalProperties")
    digital_properties: Optional[EvidenceAllOfDigitalProperties] = Field(default=None, alias="digitalProperties")
    documentary_properties: Optional[EvidenceAllOfDocumentaryProperties] = Field(default=None, alias="documentaryProperties")
    forensic_properties: Optional[EvidenceAllOfForensicProperties] = Field(default=None, alias="forensicProperties")
    notes: Optional[StrictStr] = Field(default=None, description="Additional notes about the evidence")
    tags: Optional[List[StrictStr]] = Field(default=None, description="Tags or keywords associated with the evidence")
    file_paths: Optional[List[StrictStr]] = Field(default=None, description="Paths to files associated with the evidence (photos, documents, etc.)", alias="filePaths")
    __properties: ClassVar[List[str]] = ["id", "createdBy", "createdAt", "updatedBy", "updatedAt", "evidenceNumber", "name", "description", "type", "caseId", "collectionDate", "collectionLocation", "collectedById", "status", "storageLocation", "custodyChain", "physicalProperties", "digitalProperties", "documentaryProperties", "forensicProperties", "notes", "tags", "filePaths"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Evidence from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "id",
            "created_by",
            "created_at",
            "updated_by",
            "updated_at",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in custody_chain (list)
        _items = []
        if self.custody_chain:
            for _item_custody_chain in self.custody_chain:
                if _item_custody_chain:
                    _items.append(_item_custody_chain.to_dict())
            _dict['custodyChain'] = _items
        # override the default output from pydantic by calling `to_dict()` of physical_properties
        if self.physical_properties:
            _dict['physicalProperties'] = self.physical_properties.to_dict()
        # override the default output from pydantic by calling `to_dict()` of digital_properties
        if self.digital_properties:
            _dict['digitalProperties'] = self.digital_properties.to_dict()
        # override the default output from pydantic by calling `to_dict()` of documentary_properties
        if self.documentary_properties:
            _dict['documentaryProperties'] = self.documentary_properties.to_dict()
        # override the default output from pydantic by calling `to_dict()` of forensic_properties
        if self.forensic_properties:
            _dict['forensicProperties'] = self.forensic_properties.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Evidence from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "createdBy": obj.get("createdBy"),
            "createdAt": obj.get("createdAt"),
            "updatedBy": obj.get("updatedBy"),
            "updatedAt": obj.get("updatedAt"),
            "evidenceNumber": obj.get("evidenceNumber"),
            "name": obj.get("name"),
            "description": obj.get("description"),
            "type": obj.get("type"),
            "caseId": obj.get("caseId"),
            "collectionDate": obj.get("collectionDate"),
            "collectionLocation": obj.get("collectionLocation"),
            "collectedById": obj.get("collectedById"),
            "status": obj.get("status"),
            "storageLocation": obj.get("storageLocation"),
            "custodyChain": [CustodyRecord.from_dict(_item) for _item in obj["custodyChain"]] if obj.get("custodyChain") is not None else None,
            "physicalProperties": EvidenceAllOfPhysicalProperties.from_dict(obj["physicalProperties"]) if obj.get("physicalProperties") is not None else None,
            "digitalProperties": EvidenceAllOfDigitalProperties.from_dict(obj["digitalProperties"]) if obj.get("digitalProperties") is not None else None,
            "documentaryProperties": EvidenceAllOfDocumentaryProperties.from_dict(obj["documentaryProperties"]) if obj.get("documentaryProperties") is not None else None,
            "forensicProperties": EvidenceAllOfForensicProperties.from_dict(obj["forensicProperties"]) if obj.get("forensicProperties") is not None else None,
            "notes": obj.get("notes"),
            "tags": obj.get("tags"),
            "filePaths": obj.get("filePaths")
        })
        return _obj


