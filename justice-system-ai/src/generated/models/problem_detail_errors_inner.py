# coding: utf-8

"""
    Justice system APIs

    This is the OpenAPI Specification for justice system APIs. It provides a comprehensive suite of functionalities to interact with our platform. It is designed to be easy to use and integrate with various application environments. 

    The version of the OpenAPI document: 1.0.0
    Contact: admin@spectrayan.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class ProblemDetailErrorsInner(BaseModel):
    """
    An object to provide explicit details on a problem towards an API consumer.
    """ # noqa: E501
    detail: Annotated[str, Field(strict=True, max_length=4096)] = Field(description="A granular description on the specific error related to a body property, query parameter, path parameters, and/or header.")
    pointer: Optional[Annotated[str, Field(strict=True, max_length=1024)]] = Field(default=None, description="A JSON Pointer to a specific request body property that is the source of error.")
    parameter: Optional[Annotated[str, Field(strict=True, max_length=1024)]] = Field(default=None, description="The name of the query or path parameter that is the source of error.")
    header: Optional[Annotated[str, Field(strict=True, max_length=1024)]] = Field(default=None, description="The name of the header that is the source of error.")
    code: Optional[Annotated[str, Field(strict=True, max_length=50)]] = Field(default=None, description="A string containing additional provider specific codes to identify the error context.")
    __properties: ClassVar[List[str]] = ["detail", "pointer", "parameter", "header", "code"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ProblemDetailErrorsInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ProblemDetailErrorsInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "detail": obj.get("detail"),
            "pointer": obj.get("pointer"),
            "parameter": obj.get("parameter"),
            "header": obj.get("header"),
            "code": obj.get("code")
        })
        return _obj


