# coding: utf-8

"""
    Justice system APIs

    This is the OpenAPI Specification for justice system APIs. It provides a comprehensive suite of functionalities to interact with our platform. It is designed to be easy to use and integrate with various application environments. 

    The version of the OpenAPI document: 1.0.0
    Contact: admin@spectrayan.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date, datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from justice_system.models.address import Address
from justice_system.models.gender import Gender
from justice_system.models.person_title import PersonTitle
from justice_system.models.phone import Phone
from typing import Optional, Set
from typing_extensions import Self

class Victim(BaseModel):
    """
    Victim
    """ # noqa: E501
    id: Optional[StrictStr] = Field(default=None, description="Unique document id auto generated")
    created_by: Optional[Annotated[str, Field(min_length=1, strict=True)]] = Field(default=None, description="The principal that created the entity containing the field.", alias="createdBy")
    created_at: Optional[datetime] = Field(default=None, description="The date and time the entity containing the field was created.", alias="createdAt")
    updated_by: Optional[Annotated[str, Field(min_length=1, strict=True)]] = Field(default=None, description="The principal that recently modified the entity containing the field.", alias="updatedBy")
    updated_at: Optional[datetime] = Field(default=None, description="The date the entity containing the field was recently modified.", alias="updatedAt")
    title: Optional[PersonTitle] = None
    first_name: Annotated[str, Field(min_length=1, strict=True, max_length=12)] = Field(description="Person's first name.", alias="firstName")
    middle_name: Optional[StrictStr] = Field(default=None, description="Person's middle name.", alias="middleName")
    last_name: Annotated[str, Field(min_length=1, strict=True)] = Field(description="Person's last name.", alias="lastName")
    gender: Optional[Gender] = None
    date_of_birth: date = Field(description="Victim's date of birth", alias="dateOfBirth")
    address: Optional[Address] = None
    phone_number: Optional[Phone] = Field(default=None, alias="phoneNumber")
    email: Optional[StrictStr] = Field(default=None, description="Victim's email address")
    injury_description: Optional[StrictStr] = Field(default=None, description="Description of injuries or damages suffered", alias="injuryDescription")
    impact_statement: Optional[StrictStr] = Field(default=None, description="Victim impact statement", alias="impactStatement")
    relationship_to_defendant: Optional[StrictStr] = Field(default=None, description="Relationship between victim and defendant", alias="relationshipToDefendant")
    __properties: ClassVar[List[str]] = ["id", "createdBy", "createdAt", "updatedBy", "updatedAt", "title", "firstName", "middleName", "lastName", "gender", "dateOfBirth", "address", "phoneNumber", "email", "injuryDescription", "impactStatement", "relationshipToDefendant"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Victim from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "id",
            "created_by",
            "created_at",
            "updated_by",
            "updated_at",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of address
        if self.address:
            _dict['address'] = self.address.to_dict()
        # override the default output from pydantic by calling `to_dict()` of phone_number
        if self.phone_number:
            _dict['phoneNumber'] = self.phone_number.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Victim from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "createdBy": obj.get("createdBy"),
            "createdAt": obj.get("createdAt"),
            "updatedBy": obj.get("updatedBy"),
            "updatedAt": obj.get("updatedAt"),
            "title": obj.get("title"),
            "firstName": obj.get("firstName"),
            "middleName": obj.get("middleName"),
            "lastName": obj.get("lastName"),
            "gender": obj.get("gender"),
            "dateOfBirth": obj.get("dateOfBirth"),
            "address": Address.from_dict(obj["address"]) if obj.get("address") is not None else None,
            "phoneNumber": Phone.from_dict(obj["phoneNumber"]) if obj.get("phoneNumber") is not None else None,
            "email": obj.get("email"),
            "injuryDescription": obj.get("injuryDescription"),
            "impactStatement": obj.get("impactStatement"),
            "relationshipToDefendant": obj.get("relationshipToDefendant")
        })
        return _obj


